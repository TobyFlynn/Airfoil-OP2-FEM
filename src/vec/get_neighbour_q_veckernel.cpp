//
// auto-generated by op2.py
//

//user function
inline void get_neighbour_q(const int *edgeNum, const double *xL,
                            const double *yL, const double *xR,
                            const double *yR, const double *qL0,
                            const double *qL1, const double *qL2,
                            const double *qL3, const double *qR0,
                            const double *qR1, const double *qR2,
                            const double *qR3, double *exteriorQL0,
                            double *exteriorQL1, double *exteriorQL2,
                            double *exteriorQL3, double *exteriorQR0,
                            double *exteriorQR1, double *exteriorQR2,
                            double *exteriorQR3) {
  // Work out which edge for each element
  int edgeL = edgeNum[0];
  int edgeR = edgeNum[1];
  bool reverse;

  if(edgeR == 0) {
    if(edgeL == 0) {
      reverse = !(xL[0] == xR[0] && yL[0] == yR[0]);
    } else if(edgeL == 1) {
      reverse = !(xL[1] == xR[0] && yL[1] == yR[0]);
    } else {
      reverse = !(xL[2] == xR[0] && yL[2] == yR[0]);
    }
  } else if(edgeR == 1) {
    if(edgeL == 0) {
      reverse = !(xL[0] == xR[1] && yL[0] == yR[1]);
    } else if(edgeL == 1) {
      reverse = !(xL[1] == xR[1] && yL[1] == yR[1]);
    } else {
      reverse = !(xL[2] == xR[1] && yL[2] == yR[1]);
    }
  } else {
    if(edgeL == 0) {
      reverse = !(xL[0] == xR[2] && yL[0] == yR[2]);
    } else if(edgeL == 1) {
      reverse = !(xL[1] == xR[2] && yL[1] == yR[2]);
    } else {
      reverse = !(xL[2] == xR[2] && yL[2] == yR[2]);
    }
  }

  // Copy data from R to L
  int exInd = 0;
  if(edgeL == 1) exInd = 5;
  else if(edgeL == 2) exInd = 2 * 5;

  int *fmask;

  if(edgeR == 0) {
    fmask = FMASK;
  } else if(edgeR == 1) {
    fmask = &FMASK[5];
  } else {
    fmask = &FMASK[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int rInd;
    if(reverse) {
      rInd = fmask[5 - i - 1];
    } else {
      rInd = fmask[i];
    }
    exteriorQL0[exInd + i] += qR0[rInd];
    exteriorQL1[exInd + i] += qR1[rInd];
    exteriorQL2[exInd + i] += qR2[rInd];
    exteriorQL3[exInd + i] += qR3[rInd];
  }

  // Copy data from L to R
  exInd = 0;
  if(edgeR == 1) exInd = 5;
  else if(edgeR == 2) exInd = 2 * 5;

  if(edgeL == 0) {
    fmask = FMASK;
  } else if(edgeL == 1) {
    fmask = &FMASK[5];
  } else {
    fmask = &FMASK[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int lInd;
    if(reverse) {
      lInd = fmask[5 - i - 1];
    } else {
      lInd = fmask[i];
    }
    exteriorQR0[exInd + i] += qL0[lInd];
    exteriorQR1[exInd + i] += qL1[lInd];
    exteriorQR2[exInd + i] += qL2[lInd];
    exteriorQR3[exInd + i] += qL3[lInd];
  }
}
#ifdef VECTORIZE
//user function -- modified for vectorisation
#if defined __clang__ || defined __GNUC__
__attribute__((always_inline))
#endif
inline void get_neighbour_q_vec( const int edgeNum[][SIMD_VEC], const double xL[][SIMD_VEC], const double yL[][SIMD_VEC], const double xR[][SIMD_VEC], const double yR[][SIMD_VEC], const double qL0[][SIMD_VEC], const double qL1[][SIMD_VEC], const double qL2[][SIMD_VEC], const double qL3[][SIMD_VEC], const double qR0[][SIMD_VEC], const double qR1[][SIMD_VEC], const double qR2[][SIMD_VEC], const double qR3[][SIMD_VEC], double exteriorQL0[][SIMD_VEC], double exteriorQL1[][SIMD_VEC], double exteriorQL2[][SIMD_VEC], double exteriorQL3[][SIMD_VEC], double exteriorQR0[][SIMD_VEC], double exteriorQR1[][SIMD_VEC], double exteriorQR2[][SIMD_VEC], double exteriorQR3[][SIMD_VEC], int idx ) {

  int edgeL = edgeNum[0][idx];
  int edgeR = edgeNum[1][idx];
  bool reverse;

  if(edgeR == 0) {
    if(edgeL == 0) {
      reverse = !(xL[0][idx] == xR[0][idx] && yL[0][idx] == yR[0][idx]);
    } else if(edgeL == 1) {
      reverse = !(xL[1][idx] == xR[0][idx] && yL[1][idx] == yR[0][idx]);
    } else {
      reverse = !(xL[2][idx] == xR[0][idx] && yL[2][idx] == yR[0][idx]);
    }
  } else if(edgeR == 1) {
    if(edgeL == 0) {
      reverse = !(xL[0][idx] == xR[1][idx] && yL[0][idx] == yR[1][idx]);
    } else if(edgeL == 1) {
      reverse = !(xL[1][idx] == xR[1][idx] && yL[1][idx] == yR[1][idx]);
    } else {
      reverse = !(xL[2][idx] == xR[1][idx] && yL[2][idx] == yR[1][idx]);
    }
  } else {
    if(edgeL == 0) {
      reverse = !(xL[0][idx] == xR[2][idx] && yL[0][idx] == yR[2][idx]);
    } else if(edgeL == 1) {
      reverse = !(xL[1][idx] == xR[2][idx] && yL[1][idx] == yR[2][idx]);
    } else {
      reverse = !(xL[2][idx] == xR[2][idx] && yL[2][idx] == yR[2][idx]);
    }
  }

  int exInd = 0;
  if(edgeL == 1) exInd = 5;
  else if(edgeL == 2) exInd = 2 * 5;

  int *fmask;

  if(edgeR == 0) {
    fmask = FMASK;
  } else if(edgeR == 1) {
    fmask = &FMASK[5];
  } else {
    fmask = &FMASK[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int rInd;
    if(reverse) {
      rInd = fmask[5 - i - 1];
    } else {
      rInd = fmask[i];
    }
    exteriorQL0[exInd + i][idx] = qR0[rInd][idx];
    exteriorQL1[exInd + i][idx] = qR1[rInd][idx];
    exteriorQL2[exInd + i][idx] = qR2[rInd][idx];
    exteriorQL3[exInd + i][idx] = qR3[rInd][idx];
  }

  exInd = 0;
  if(edgeR == 1) exInd = 5;
  else if(edgeR == 2) exInd = 2 * 5;

  if(edgeL == 0) {
    fmask = FMASK;
  } else if(edgeL == 1) {
    fmask = &FMASK[5];
  } else {
    fmask = &FMASK[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int lInd;
    if(reverse) {
      lInd = fmask[5 - i - 1];
    } else {
      lInd = fmask[i];
    }
    exteriorQR0[exInd + i][idx] = qL0[lInd][idx];
    exteriorQR1[exInd + i][idx] = qL1[lInd][idx];
    exteriorQR2[exInd + i][idx] = qL2[lInd][idx];
    exteriorQR3[exInd + i][idx] = qL3[lInd][idx];
  }

}
#endif

// host stub function
void op_par_loop_get_neighbour_q(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20){

  int nargs = 21;
  op_arg args[21];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  args[16] = arg16;
  args[17] = arg17;
  args[18] = arg18;
  args[19] = arg19;
  args[20] = arg20;
  //create aligned pointers for dats
  ALIGNED_int const int * __restrict__ ptr0 = (int *) arg0.data;
  DECLARE_PTR_ALIGNED(ptr0,int_ALIGN);
  ALIGNED_double const double * __restrict__ ptr1 = (double *) arg1.data;
  DECLARE_PTR_ALIGNED(ptr1,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr2 = (double *) arg2.data;
  DECLARE_PTR_ALIGNED(ptr2,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr3 = (double *) arg3.data;
  DECLARE_PTR_ALIGNED(ptr3,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr4 = (double *) arg4.data;
  DECLARE_PTR_ALIGNED(ptr4,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr5 = (double *) arg5.data;
  DECLARE_PTR_ALIGNED(ptr5,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr6 = (double *) arg6.data;
  DECLARE_PTR_ALIGNED(ptr6,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr7 = (double *) arg7.data;
  DECLARE_PTR_ALIGNED(ptr7,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr8 = (double *) arg8.data;
  DECLARE_PTR_ALIGNED(ptr8,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr9 = (double *) arg9.data;
  DECLARE_PTR_ALIGNED(ptr9,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr10 = (double *) arg10.data;
  DECLARE_PTR_ALIGNED(ptr10,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr11 = (double *) arg11.data;
  DECLARE_PTR_ALIGNED(ptr11,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr12 = (double *) arg12.data;
  DECLARE_PTR_ALIGNED(ptr12,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr13 = (double *) arg13.data;
  DECLARE_PTR_ALIGNED(ptr13,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr14 = (double *) arg14.data;
  DECLARE_PTR_ALIGNED(ptr14,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr15 = (double *) arg15.data;
  DECLARE_PTR_ALIGNED(ptr15,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr16 = (double *) arg16.data;
  DECLARE_PTR_ALIGNED(ptr16,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr17 = (double *) arg17.data;
  DECLARE_PTR_ALIGNED(ptr17,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr18 = (double *) arg18.data;
  DECLARE_PTR_ALIGNED(ptr18,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr19 = (double *) arg19.data;
  DECLARE_PTR_ALIGNED(ptr19,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr20 = (double *) arg20.data;
  DECLARE_PTR_ALIGNED(ptr20,double_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: get_neighbour_q\n");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      if ((n+SIMD_VEC >= set->core_size) && (n+SIMD_VEC-set->core_size < SIMD_VEC)) {
        op_mpi_wait_all(nargs, args);
      }
      ALIGNED_int int dat0[2][SIMD_VEC];
      ALIGNED_double double dat1[3][SIMD_VEC];
      ALIGNED_double double dat2[3][SIMD_VEC];
      ALIGNED_double double dat3[3][SIMD_VEC];
      ALIGNED_double double dat4[3][SIMD_VEC];
      ALIGNED_double double dat5[15][SIMD_VEC];
      ALIGNED_double double dat6[15][SIMD_VEC];
      ALIGNED_double double dat7[15][SIMD_VEC];
      ALIGNED_double double dat8[15][SIMD_VEC];
      ALIGNED_double double dat9[15][SIMD_VEC];
      ALIGNED_double double dat10[15][SIMD_VEC];
      ALIGNED_double double dat11[15][SIMD_VEC];
      ALIGNED_double double dat12[15][SIMD_VEC];
      ALIGNED_double double dat13[15][SIMD_VEC];
      ALIGNED_double double dat14[15][SIMD_VEC];
      ALIGNED_double double dat15[15][SIMD_VEC];
      ALIGNED_double double dat16[15][SIMD_VEC];
      ALIGNED_double double dat17[15][SIMD_VEC];
      ALIGNED_double double dat18[15][SIMD_VEC];
      ALIGNED_double double dat19[15][SIMD_VEC];
      ALIGNED_double double dat20[15][SIMD_VEC];
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx0_2 = 2 * (n+i);
        int idx1_3 = 3 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx2_3 = 3 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx3_3 = 3 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx4_3 = 3 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx5_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx6_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx7_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx8_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx9_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx10_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx11_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx12_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 1];

        dat0[0][i] = (ptr0)[idx0_2 + 0];
        dat0[1][i] = (ptr0)[idx0_2 + 1];

        dat1[0][i] = (ptr1)[idx1_3 + 0];
        dat1[1][i] = (ptr1)[idx1_3 + 1];
        dat1[2][i] = (ptr1)[idx1_3 + 2];

        dat2[0][i] = (ptr2)[idx2_3 + 0];
        dat2[1][i] = (ptr2)[idx2_3 + 1];
        dat2[2][i] = (ptr2)[idx2_3 + 2];

        dat3[0][i] = (ptr3)[idx3_3 + 0];
        dat3[1][i] = (ptr3)[idx3_3 + 1];
        dat3[2][i] = (ptr3)[idx3_3 + 2];

        dat4[0][i] = (ptr4)[idx4_3 + 0];
        dat4[1][i] = (ptr4)[idx4_3 + 1];
        dat4[2][i] = (ptr4)[idx4_3 + 2];

        dat5[0][i] = (ptr5)[idx5_15 + 0];
        dat5[1][i] = (ptr5)[idx5_15 + 1];
        dat5[2][i] = (ptr5)[idx5_15 + 2];
        dat5[3][i] = (ptr5)[idx5_15 + 3];
        dat5[4][i] = (ptr5)[idx5_15 + 4];
        dat5[5][i] = (ptr5)[idx5_15 + 5];
        dat5[6][i] = (ptr5)[idx5_15 + 6];
        dat5[7][i] = (ptr5)[idx5_15 + 7];
        dat5[8][i] = (ptr5)[idx5_15 + 8];
        dat5[9][i] = (ptr5)[idx5_15 + 9];
        dat5[10][i] = (ptr5)[idx5_15 + 10];
        dat5[11][i] = (ptr5)[idx5_15 + 11];
        dat5[12][i] = (ptr5)[idx5_15 + 12];
        dat5[13][i] = (ptr5)[idx5_15 + 13];
        dat5[14][i] = (ptr5)[idx5_15 + 14];

        dat6[0][i] = (ptr6)[idx6_15 + 0];
        dat6[1][i] = (ptr6)[idx6_15 + 1];
        dat6[2][i] = (ptr6)[idx6_15 + 2];
        dat6[3][i] = (ptr6)[idx6_15 + 3];
        dat6[4][i] = (ptr6)[idx6_15 + 4];
        dat6[5][i] = (ptr6)[idx6_15 + 5];
        dat6[6][i] = (ptr6)[idx6_15 + 6];
        dat6[7][i] = (ptr6)[idx6_15 + 7];
        dat6[8][i] = (ptr6)[idx6_15 + 8];
        dat6[9][i] = (ptr6)[idx6_15 + 9];
        dat6[10][i] = (ptr6)[idx6_15 + 10];
        dat6[11][i] = (ptr6)[idx6_15 + 11];
        dat6[12][i] = (ptr6)[idx6_15 + 12];
        dat6[13][i] = (ptr6)[idx6_15 + 13];
        dat6[14][i] = (ptr6)[idx6_15 + 14];

        dat7[0][i] = (ptr7)[idx7_15 + 0];
        dat7[1][i] = (ptr7)[idx7_15 + 1];
        dat7[2][i] = (ptr7)[idx7_15 + 2];
        dat7[3][i] = (ptr7)[idx7_15 + 3];
        dat7[4][i] = (ptr7)[idx7_15 + 4];
        dat7[5][i] = (ptr7)[idx7_15 + 5];
        dat7[6][i] = (ptr7)[idx7_15 + 6];
        dat7[7][i] = (ptr7)[idx7_15 + 7];
        dat7[8][i] = (ptr7)[idx7_15 + 8];
        dat7[9][i] = (ptr7)[idx7_15 + 9];
        dat7[10][i] = (ptr7)[idx7_15 + 10];
        dat7[11][i] = (ptr7)[idx7_15 + 11];
        dat7[12][i] = (ptr7)[idx7_15 + 12];
        dat7[13][i] = (ptr7)[idx7_15 + 13];
        dat7[14][i] = (ptr7)[idx7_15 + 14];

        dat8[0][i] = (ptr8)[idx8_15 + 0];
        dat8[1][i] = (ptr8)[idx8_15 + 1];
        dat8[2][i] = (ptr8)[idx8_15 + 2];
        dat8[3][i] = (ptr8)[idx8_15 + 3];
        dat8[4][i] = (ptr8)[idx8_15 + 4];
        dat8[5][i] = (ptr8)[idx8_15 + 5];
        dat8[6][i] = (ptr8)[idx8_15 + 6];
        dat8[7][i] = (ptr8)[idx8_15 + 7];
        dat8[8][i] = (ptr8)[idx8_15 + 8];
        dat8[9][i] = (ptr8)[idx8_15 + 9];
        dat8[10][i] = (ptr8)[idx8_15 + 10];
        dat8[11][i] = (ptr8)[idx8_15 + 11];
        dat8[12][i] = (ptr8)[idx8_15 + 12];
        dat8[13][i] = (ptr8)[idx8_15 + 13];
        dat8[14][i] = (ptr8)[idx8_15 + 14];

        dat9[0][i] = (ptr9)[idx9_15 + 0];
        dat9[1][i] = (ptr9)[idx9_15 + 1];
        dat9[2][i] = (ptr9)[idx9_15 + 2];
        dat9[3][i] = (ptr9)[idx9_15 + 3];
        dat9[4][i] = (ptr9)[idx9_15 + 4];
        dat9[5][i] = (ptr9)[idx9_15 + 5];
        dat9[6][i] = (ptr9)[idx9_15 + 6];
        dat9[7][i] = (ptr9)[idx9_15 + 7];
        dat9[8][i] = (ptr9)[idx9_15 + 8];
        dat9[9][i] = (ptr9)[idx9_15 + 9];
        dat9[10][i] = (ptr9)[idx9_15 + 10];
        dat9[11][i] = (ptr9)[idx9_15 + 11];
        dat9[12][i] = (ptr9)[idx9_15 + 12];
        dat9[13][i] = (ptr9)[idx9_15 + 13];
        dat9[14][i] = (ptr9)[idx9_15 + 14];

        dat10[0][i] = (ptr10)[idx10_15 + 0];
        dat10[1][i] = (ptr10)[idx10_15 + 1];
        dat10[2][i] = (ptr10)[idx10_15 + 2];
        dat10[3][i] = (ptr10)[idx10_15 + 3];
        dat10[4][i] = (ptr10)[idx10_15 + 4];
        dat10[5][i] = (ptr10)[idx10_15 + 5];
        dat10[6][i] = (ptr10)[idx10_15 + 6];
        dat10[7][i] = (ptr10)[idx10_15 + 7];
        dat10[8][i] = (ptr10)[idx10_15 + 8];
        dat10[9][i] = (ptr10)[idx10_15 + 9];
        dat10[10][i] = (ptr10)[idx10_15 + 10];
        dat10[11][i] = (ptr10)[idx10_15 + 11];
        dat10[12][i] = (ptr10)[idx10_15 + 12];
        dat10[13][i] = (ptr10)[idx10_15 + 13];
        dat10[14][i] = (ptr10)[idx10_15 + 14];

        dat11[0][i] = (ptr11)[idx11_15 + 0];
        dat11[1][i] = (ptr11)[idx11_15 + 1];
        dat11[2][i] = (ptr11)[idx11_15 + 2];
        dat11[3][i] = (ptr11)[idx11_15 + 3];
        dat11[4][i] = (ptr11)[idx11_15 + 4];
        dat11[5][i] = (ptr11)[idx11_15 + 5];
        dat11[6][i] = (ptr11)[idx11_15 + 6];
        dat11[7][i] = (ptr11)[idx11_15 + 7];
        dat11[8][i] = (ptr11)[idx11_15 + 8];
        dat11[9][i] = (ptr11)[idx11_15 + 9];
        dat11[10][i] = (ptr11)[idx11_15 + 10];
        dat11[11][i] = (ptr11)[idx11_15 + 11];
        dat11[12][i] = (ptr11)[idx11_15 + 12];
        dat11[13][i] = (ptr11)[idx11_15 + 13];
        dat11[14][i] = (ptr11)[idx11_15 + 14];

        dat12[0][i] = (ptr12)[idx12_15 + 0];
        dat12[1][i] = (ptr12)[idx12_15 + 1];
        dat12[2][i] = (ptr12)[idx12_15 + 2];
        dat12[3][i] = (ptr12)[idx12_15 + 3];
        dat12[4][i] = (ptr12)[idx12_15 + 4];
        dat12[5][i] = (ptr12)[idx12_15 + 5];
        dat12[6][i] = (ptr12)[idx12_15 + 6];
        dat12[7][i] = (ptr12)[idx12_15 + 7];
        dat12[8][i] = (ptr12)[idx12_15 + 8];
        dat12[9][i] = (ptr12)[idx12_15 + 9];
        dat12[10][i] = (ptr12)[idx12_15 + 10];
        dat12[11][i] = (ptr12)[idx12_15 + 11];
        dat12[12][i] = (ptr12)[idx12_15 + 12];
        dat12[13][i] = (ptr12)[idx12_15 + 13];
        dat12[14][i] = (ptr12)[idx12_15 + 14];

        dat13[0][i] = 0.0;
        dat13[1][i] = 0.0;
        dat13[2][i] = 0.0;
        dat13[3][i] = 0.0;
        dat13[4][i] = 0.0;
        dat13[5][i] = 0.0;
        dat13[6][i] = 0.0;
        dat13[7][i] = 0.0;
        dat13[8][i] = 0.0;
        dat13[9][i] = 0.0;
        dat13[10][i] = 0.0;
        dat13[11][i] = 0.0;
        dat13[12][i] = 0.0;
        dat13[13][i] = 0.0;
        dat13[14][i] = 0.0;

        dat14[0][i] = 0.0;
        dat14[1][i] = 0.0;
        dat14[2][i] = 0.0;
        dat14[3][i] = 0.0;
        dat14[4][i] = 0.0;
        dat14[5][i] = 0.0;
        dat14[6][i] = 0.0;
        dat14[7][i] = 0.0;
        dat14[8][i] = 0.0;
        dat14[9][i] = 0.0;
        dat14[10][i] = 0.0;
        dat14[11][i] = 0.0;
        dat14[12][i] = 0.0;
        dat14[13][i] = 0.0;
        dat14[14][i] = 0.0;

        dat15[0][i] = 0.0;
        dat15[1][i] = 0.0;
        dat15[2][i] = 0.0;
        dat15[3][i] = 0.0;
        dat15[4][i] = 0.0;
        dat15[5][i] = 0.0;
        dat15[6][i] = 0.0;
        dat15[7][i] = 0.0;
        dat15[8][i] = 0.0;
        dat15[9][i] = 0.0;
        dat15[10][i] = 0.0;
        dat15[11][i] = 0.0;
        dat15[12][i] = 0.0;
        dat15[13][i] = 0.0;
        dat15[14][i] = 0.0;

        dat16[0][i] = 0.0;
        dat16[1][i] = 0.0;
        dat16[2][i] = 0.0;
        dat16[3][i] = 0.0;
        dat16[4][i] = 0.0;
        dat16[5][i] = 0.0;
        dat16[6][i] = 0.0;
        dat16[7][i] = 0.0;
        dat16[8][i] = 0.0;
        dat16[9][i] = 0.0;
        dat16[10][i] = 0.0;
        dat16[11][i] = 0.0;
        dat16[12][i] = 0.0;
        dat16[13][i] = 0.0;
        dat16[14][i] = 0.0;

        dat17[0][i] = 0.0;
        dat17[1][i] = 0.0;
        dat17[2][i] = 0.0;
        dat17[3][i] = 0.0;
        dat17[4][i] = 0.0;
        dat17[5][i] = 0.0;
        dat17[6][i] = 0.0;
        dat17[7][i] = 0.0;
        dat17[8][i] = 0.0;
        dat17[9][i] = 0.0;
        dat17[10][i] = 0.0;
        dat17[11][i] = 0.0;
        dat17[12][i] = 0.0;
        dat17[13][i] = 0.0;
        dat17[14][i] = 0.0;

        dat18[0][i] = 0.0;
        dat18[1][i] = 0.0;
        dat18[2][i] = 0.0;
        dat18[3][i] = 0.0;
        dat18[4][i] = 0.0;
        dat18[5][i] = 0.0;
        dat18[6][i] = 0.0;
        dat18[7][i] = 0.0;
        dat18[8][i] = 0.0;
        dat18[9][i] = 0.0;
        dat18[10][i] = 0.0;
        dat18[11][i] = 0.0;
        dat18[12][i] = 0.0;
        dat18[13][i] = 0.0;
        dat18[14][i] = 0.0;

        dat19[0][i] = 0.0;
        dat19[1][i] = 0.0;
        dat19[2][i] = 0.0;
        dat19[3][i] = 0.0;
        dat19[4][i] = 0.0;
        dat19[5][i] = 0.0;
        dat19[6][i] = 0.0;
        dat19[7][i] = 0.0;
        dat19[8][i] = 0.0;
        dat19[9][i] = 0.0;
        dat19[10][i] = 0.0;
        dat19[11][i] = 0.0;
        dat19[12][i] = 0.0;
        dat19[13][i] = 0.0;
        dat19[14][i] = 0.0;

        dat20[0][i] = 0.0;
        dat20[1][i] = 0.0;
        dat20[2][i] = 0.0;
        dat20[3][i] = 0.0;
        dat20[4][i] = 0.0;
        dat20[5][i] = 0.0;
        dat20[6][i] = 0.0;
        dat20[7][i] = 0.0;
        dat20[8][i] = 0.0;
        dat20[9][i] = 0.0;
        dat20[10][i] = 0.0;
        dat20[11][i] = 0.0;
        dat20[12][i] = 0.0;
        dat20[13][i] = 0.0;
        dat20[14][i] = 0.0;

      }
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        get_neighbour_q_vec(
          dat0,
          dat1,
          dat2,
          dat3,
          dat4,
          dat5,
          dat6,
          dat7,
          dat8,
          dat9,
          dat10,
          dat11,
          dat12,
          dat13,
          dat14,
          dat15,
          dat16,
          dat17,
          dat18,
          dat19,
          dat20,
          i);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx13_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx14_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx15_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx16_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx17_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx18_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx19_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx20_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 1];

        (ptr13)[idx13_15 + 0] += dat13[0][i];
        (ptr13)[idx13_15 + 1] += dat13[1][i];
        (ptr13)[idx13_15 + 2] += dat13[2][i];
        (ptr13)[idx13_15 + 3] += dat13[3][i];
        (ptr13)[idx13_15 + 4] += dat13[4][i];
        (ptr13)[idx13_15 + 5] += dat13[5][i];
        (ptr13)[idx13_15 + 6] += dat13[6][i];
        (ptr13)[idx13_15 + 7] += dat13[7][i];
        (ptr13)[idx13_15 + 8] += dat13[8][i];
        (ptr13)[idx13_15 + 9] += dat13[9][i];
        (ptr13)[idx13_15 + 10] += dat13[10][i];
        (ptr13)[idx13_15 + 11] += dat13[11][i];
        (ptr13)[idx13_15 + 12] += dat13[12][i];
        (ptr13)[idx13_15 + 13] += dat13[13][i];
        (ptr13)[idx13_15 + 14] += dat13[14][i];

        (ptr14)[idx14_15 + 0] += dat14[0][i];
        (ptr14)[idx14_15 + 1] += dat14[1][i];
        (ptr14)[idx14_15 + 2] += dat14[2][i];
        (ptr14)[idx14_15 + 3] += dat14[3][i];
        (ptr14)[idx14_15 + 4] += dat14[4][i];
        (ptr14)[idx14_15 + 5] += dat14[5][i];
        (ptr14)[idx14_15 + 6] += dat14[6][i];
        (ptr14)[idx14_15 + 7] += dat14[7][i];
        (ptr14)[idx14_15 + 8] += dat14[8][i];
        (ptr14)[idx14_15 + 9] += dat14[9][i];
        (ptr14)[idx14_15 + 10] += dat14[10][i];
        (ptr14)[idx14_15 + 11] += dat14[11][i];
        (ptr14)[idx14_15 + 12] += dat14[12][i];
        (ptr14)[idx14_15 + 13] += dat14[13][i];
        (ptr14)[idx14_15 + 14] += dat14[14][i];

        (ptr15)[idx15_15 + 0] += dat15[0][i];
        (ptr15)[idx15_15 + 1] += dat15[1][i];
        (ptr15)[idx15_15 + 2] += dat15[2][i];
        (ptr15)[idx15_15 + 3] += dat15[3][i];
        (ptr15)[idx15_15 + 4] += dat15[4][i];
        (ptr15)[idx15_15 + 5] += dat15[5][i];
        (ptr15)[idx15_15 + 6] += dat15[6][i];
        (ptr15)[idx15_15 + 7] += dat15[7][i];
        (ptr15)[idx15_15 + 8] += dat15[8][i];
        (ptr15)[idx15_15 + 9] += dat15[9][i];
        (ptr15)[idx15_15 + 10] += dat15[10][i];
        (ptr15)[idx15_15 + 11] += dat15[11][i];
        (ptr15)[idx15_15 + 12] += dat15[12][i];
        (ptr15)[idx15_15 + 13] += dat15[13][i];
        (ptr15)[idx15_15 + 14] += dat15[14][i];

        (ptr16)[idx16_15 + 0] += dat16[0][i];
        (ptr16)[idx16_15 + 1] += dat16[1][i];
        (ptr16)[idx16_15 + 2] += dat16[2][i];
        (ptr16)[idx16_15 + 3] += dat16[3][i];
        (ptr16)[idx16_15 + 4] += dat16[4][i];
        (ptr16)[idx16_15 + 5] += dat16[5][i];
        (ptr16)[idx16_15 + 6] += dat16[6][i];
        (ptr16)[idx16_15 + 7] += dat16[7][i];
        (ptr16)[idx16_15 + 8] += dat16[8][i];
        (ptr16)[idx16_15 + 9] += dat16[9][i];
        (ptr16)[idx16_15 + 10] += dat16[10][i];
        (ptr16)[idx16_15 + 11] += dat16[11][i];
        (ptr16)[idx16_15 + 12] += dat16[12][i];
        (ptr16)[idx16_15 + 13] += dat16[13][i];
        (ptr16)[idx16_15 + 14] += dat16[14][i];

        (ptr17)[idx17_15 + 0] += dat17[0][i];
        (ptr17)[idx17_15 + 1] += dat17[1][i];
        (ptr17)[idx17_15 + 2] += dat17[2][i];
        (ptr17)[idx17_15 + 3] += dat17[3][i];
        (ptr17)[idx17_15 + 4] += dat17[4][i];
        (ptr17)[idx17_15 + 5] += dat17[5][i];
        (ptr17)[idx17_15 + 6] += dat17[6][i];
        (ptr17)[idx17_15 + 7] += dat17[7][i];
        (ptr17)[idx17_15 + 8] += dat17[8][i];
        (ptr17)[idx17_15 + 9] += dat17[9][i];
        (ptr17)[idx17_15 + 10] += dat17[10][i];
        (ptr17)[idx17_15 + 11] += dat17[11][i];
        (ptr17)[idx17_15 + 12] += dat17[12][i];
        (ptr17)[idx17_15 + 13] += dat17[13][i];
        (ptr17)[idx17_15 + 14] += dat17[14][i];

        (ptr18)[idx18_15 + 0] += dat18[0][i];
        (ptr18)[idx18_15 + 1] += dat18[1][i];
        (ptr18)[idx18_15 + 2] += dat18[2][i];
        (ptr18)[idx18_15 + 3] += dat18[3][i];
        (ptr18)[idx18_15 + 4] += dat18[4][i];
        (ptr18)[idx18_15 + 5] += dat18[5][i];
        (ptr18)[idx18_15 + 6] += dat18[6][i];
        (ptr18)[idx18_15 + 7] += dat18[7][i];
        (ptr18)[idx18_15 + 8] += dat18[8][i];
        (ptr18)[idx18_15 + 9] += dat18[9][i];
        (ptr18)[idx18_15 + 10] += dat18[10][i];
        (ptr18)[idx18_15 + 11] += dat18[11][i];
        (ptr18)[idx18_15 + 12] += dat18[12][i];
        (ptr18)[idx18_15 + 13] += dat18[13][i];
        (ptr18)[idx18_15 + 14] += dat18[14][i];

        (ptr19)[idx19_15 + 0] += dat19[0][i];
        (ptr19)[idx19_15 + 1] += dat19[1][i];
        (ptr19)[idx19_15 + 2] += dat19[2][i];
        (ptr19)[idx19_15 + 3] += dat19[3][i];
        (ptr19)[idx19_15 + 4] += dat19[4][i];
        (ptr19)[idx19_15 + 5] += dat19[5][i];
        (ptr19)[idx19_15 + 6] += dat19[6][i];
        (ptr19)[idx19_15 + 7] += dat19[7][i];
        (ptr19)[idx19_15 + 8] += dat19[8][i];
        (ptr19)[idx19_15 + 9] += dat19[9][i];
        (ptr19)[idx19_15 + 10] += dat19[10][i];
        (ptr19)[idx19_15 + 11] += dat19[11][i];
        (ptr19)[idx19_15 + 12] += dat19[12][i];
        (ptr19)[idx19_15 + 13] += dat19[13][i];
        (ptr19)[idx19_15 + 14] += dat19[14][i];

        (ptr20)[idx20_15 + 0] += dat20[0][i];
        (ptr20)[idx20_15 + 1] += dat20[1][i];
        (ptr20)[idx20_15 + 2] += dat20[2][i];
        (ptr20)[idx20_15 + 3] += dat20[3][i];
        (ptr20)[idx20_15 + 4] += dat20[4][i];
        (ptr20)[idx20_15 + 5] += dat20[5][i];
        (ptr20)[idx20_15 + 6] += dat20[6][i];
        (ptr20)[idx20_15 + 7] += dat20[7][i];
        (ptr20)[idx20_15 + 8] += dat20[8][i];
        (ptr20)[idx20_15 + 9] += dat20[9][i];
        (ptr20)[idx20_15 + 10] += dat20[10][i];
        (ptr20)[idx20_15 + 11] += dat20[11][i];
        (ptr20)[idx20_15 + 12] += dat20[12][i];
        (ptr20)[idx20_15 + 13] += dat20[13][i];
        (ptr20)[idx20_15 + 14] += dat20[14][i];

      }
    }

    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      if (n==set->core_size) {
        op_mpi_wait_all(nargs, args);
      }
      int map1idx;
      int map3idx;
      map1idx = arg1.map_data[n * arg1.map->dim + 0];
      map3idx = arg1.map_data[n * arg1.map->dim + 1];

      get_neighbour_q(
        &(ptr0)[2 * n],
        &(ptr1)[3 * map1idx],
        &(ptr2)[3 * map1idx],
        &(ptr3)[3 * map3idx],
        &(ptr4)[3 * map3idx],
        &(ptr5)[15 * map1idx],
        &(ptr6)[15 * map1idx],
        &(ptr7)[15 * map1idx],
        &(ptr8)[15 * map1idx],
        &(ptr9)[15 * map3idx],
        &(ptr10)[15 * map3idx],
        &(ptr11)[15 * map3idx],
        &(ptr12)[15 * map3idx],
        &(ptr13)[15 * map1idx],
        &(ptr14)[15 * map1idx],
        &(ptr15)[15 * map1idx],
        &(ptr16)[15 * map1idx],
        &(ptr17)[15 * map3idx],
        &(ptr18)[15 * map3idx],
        &(ptr19)[15 * map3idx],
        &(ptr20)[15 * map3idx]);
    }
  }

  if (exec_size == 0 || exec_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;
  OP_kernels[3].time     += wall_t2 - wall_t1;
  OP_kernels[3].transfer += (float)set->size * arg1.size;
  OP_kernels[3].transfer += (float)set->size * arg2.size;
  OP_kernels[3].transfer += (float)set->size * arg5.size;
  OP_kernels[3].transfer += (float)set->size * arg6.size;
  OP_kernels[3].transfer += (float)set->size * arg8.size;
  OP_kernels[3].transfer += (float)set->size * arg14.size * 2.0f;
  OP_kernels[3].transfer += (float)set->size * arg15.size * 2.0f;
  OP_kernels[3].transfer += (float)set->size * arg16.size * 2.0f;
  OP_kernels[3].transfer += (float)set->size * arg0.size;
  OP_kernels[3].transfer += (float)set->size * arg1.map->dim * 4.0f;
}
