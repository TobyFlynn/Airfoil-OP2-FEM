//
// auto-generated by op2.py
//

//user function
#include <cmath>

#include "fluxes.h"

inline void get_neighbour_q(const int *edgeNum, const double *xL,
                            const double *yL, const double *xR,
                            const double *yR, const double *nxL,
                            const double *nyL, const double *nxR,
                            const double *nyR, const double *fscaleL,
                            const double *fscaleR, const double *qL,
                            const double *qR, double *fluxL, double *fluxR) {
  double exteriorQL[4 * 5];
  double exteriorQR[4 * 5];
  // Work out which edge for each element
  int edgeL = edgeNum[0];
  int edgeR = edgeNum[1];
  bool reverse;

  if(edgeR == 0) {
    if(edgeL == 0) {
      reverse = !(xL[0] == xR[0] && yL[0] == yR[0]);
    } else if(edgeL == 1) {
      reverse = !(xL[1] == xR[0] && yL[1] == yR[0]);
    } else {
      reverse = !(xL[2] == xR[0] && yL[2] == yR[0]);
    }
  } else if(edgeR == 1) {
    if(edgeL == 0) {
      reverse = !(xL[0] == xR[1] && yL[0] == yR[1]);
    } else if(edgeL == 1) {
      reverse = !(xL[1] == xR[1] && yL[1] == yR[1]);
    } else {
      reverse = !(xL[2] == xR[1] && yL[2] == yR[1]);
    }
  } else {
    if(edgeL == 0) {
      reverse = !(xL[0] == xR[2] && yL[0] == yR[2]);
    } else if(edgeL == 1) {
      reverse = !(xL[1] == xR[2] && yL[1] == yR[2]);
    } else {
      reverse = !(xL[2] == xR[2] && yL[2] == yR[2]);
    }
  }

  // Copy data from R to L
  int exIndL = 0;
  int nIndL = 0;
  if(edgeL == 1) {
    exIndL = 4 * 5;
    nIndL = 5;
  } else if(edgeL == 2) {
    exIndL = 2 * 4 * 5;
    nIndL = 2 * 5;
  }

  int *fmask;

  if(edgeR == 0) {
    fmask = FMASK;
  } else if(edgeR == 1) {
    fmask = &FMASK[5];
  } else {
    fmask = &FMASK[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int rInd;
    if(reverse) {
      rInd = 4 * fmask[5 - i - 1];
    } else {
      rInd = 4 * fmask[i];
    }
    exteriorQL[4 * i]     = qR[rInd];
    exteriorQL[4 * i + 1] = qR[rInd + 1];
    exteriorQL[4 * i + 2] = qR[rInd + 2];
    exteriorQL[4 * i + 3] = qR[rInd + 3];
  }

  // Copy data from L to R
  int exIndR = 0;
  int nIndR = 0;
  if(edgeR == 1) {
    exIndR = 4 * 5;
    nIndR = 5;
  } else if(edgeR == 2) {
    exIndR = 2 * 4 * 5;
    nIndR = 2 * 5;
  }

  if(edgeL == 0) {
    fmask = FMASK;
  } else if(edgeL == 1) {
    fmask = &FMASK[5];
  } else {
    fmask = &FMASK[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int lInd;
    if(reverse) {
      lInd = 4 * fmask[5 - i - 1];
    } else {
      lInd = 4 * fmask[i];
    }
    exteriorQR[4 * i]     = qL[lInd];
    exteriorQR[4 * i + 1] = qL[lInd + 1];
    exteriorQR[4 * i + 2] = qL[lInd + 2];
    exteriorQR[4 * i + 3] = qL[lInd + 3];
  }

  // Compute numerical fluxes
  // lax_friedrichs(fluxL + exIndL, nxL + nIndL, nyL + nIndL, fscaleL + nIndL, qL, exteriorQL, nIndL);
  roe(fluxL + exIndL, nxL + nIndL, nyL + nIndL, fscaleL + nIndL, qL, exteriorQL, nIndL);

  // lax_friedrichs(fluxR + exIndR, nxR + nIndR, nyR + nIndR, fscaleR + nIndR, qR, exteriorQR, nIndR);
  roe(fluxR + exIndR, nxR + nIndR, nyR + nIndR, fscaleR + nIndR, qR, exteriorQR, nIndR);
}
#ifdef VECTORIZE
//user function -- modified for vectorisation
#if defined __clang__ || defined __GNUC__
__attribute__((always_inline))
#endif
inline void get_neighbour_q_vec( const int edgeNum[][SIMD_VEC], const double xL[][SIMD_VEC], const double yL[][SIMD_VEC], const double xR[][SIMD_VEC], const double yR[][SIMD_VEC], const double nxL[][SIMD_VEC], const double nyL[][SIMD_VEC], const double nxR[][SIMD_VEC], const double nyR[][SIMD_VEC], const double fscaleL[][SIMD_VEC], const double fscaleR[][SIMD_VEC], const double qL[][SIMD_VEC], const double qR[][SIMD_VEC], double fluxL[][SIMD_VEC], double fluxR[][SIMD_VEC], int idx ) {
  double exteriorQL[4 * 5];
  double exteriorQR[4 * 5];

  int edgeL = edgeNum[0][idx];
  int edgeR = edgeNum[1][idx];
  bool reverse;

  if(edgeR == 0) {
    if(edgeL == 0) {
      reverse = !(xL[0][idx] == xR[0][idx] && yL[0][idx] == yR[0][idx]);
    } else if(edgeL == 1) {
      reverse = !(xL[1][idx] == xR[0][idx] && yL[1][idx] == yR[0][idx]);
    } else {
      reverse = !(xL[2][idx] == xR[0][idx] && yL[2][idx] == yR[0][idx]);
    }
  } else if(edgeR == 1) {
    if(edgeL == 0) {
      reverse = !(xL[0][idx] == xR[1][idx] && yL[0][idx] == yR[1][idx]);
    } else if(edgeL == 1) {
      reverse = !(xL[1][idx] == xR[1][idx] && yL[1][idx] == yR[1][idx]);
    } else {
      reverse = !(xL[2][idx] == xR[1][idx] && yL[2][idx] == yR[1][idx]);
    }
  } else {
    if(edgeL == 0) {
      reverse = !(xL[0][idx] == xR[2][idx] && yL[0][idx] == yR[2][idx]);
    } else if(edgeL == 1) {
      reverse = !(xL[1][idx] == xR[2][idx] && yL[1][idx] == yR[2][idx]);
    } else {
      reverse = !(xL[2][idx] == xR[2][idx] && yL[2][idx] == yR[2][idx]);
    }
  }

  int exIndL = 0;
  int nIndL = 0;
  if(edgeL == 1) {
    exIndL = 4 * 5;
    nIndL = 5;
  } else if(edgeL == 2) {
    exIndL = 2 * 4 * 5;
    nIndL = 2 * 5;
  }

  int *fmask;

  if(edgeR == 0) {
    fmask = FMASK;
  } else if(edgeR == 1) {
    fmask = &FMASK[5];
  } else {
    fmask = &FMASK[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int rInd;
    if(reverse) {
      rInd = 4 * fmask[5 - i - 1];
    } else {
      rInd = 4 * fmask[i];
    }
    exteriorQL[4 * i]     = qR[rInd][idx];
    exteriorQL[4 * i + 1] = qR[rInd + 1][idx];
    exteriorQL[4 * i + 2] = qR[rInd + 2][idx];
    exteriorQL[4 * i + 3] = qR[rInd + 3][idx];
  }

  int exIndR = 0;
  int nIndR = 0;
  if(edgeR == 1) {
    exIndR = 4 * 5;
    nIndR = 5;
  } else if(edgeR == 2) {
    exIndR = 2 * 4 * 5;
    nIndR = 2 * 5;
  }

  if(edgeL == 0) {
    fmask = FMASK;
  } else if(edgeL == 1) {
    fmask = &FMASK[5];
  } else {
    fmask = &FMASK[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int lInd;
    if(reverse) {
      lInd = 4 * fmask[5 - i - 1];
    } else {
      lInd = 4 * fmask[i];
    }
    exteriorQR[4 * i]     = qL[lInd][idx];
    exteriorQR[4 * i + 1] = qL[lInd + 1][idx];
    exteriorQR[4 * i + 2] = qL[lInd + 2][idx];
    exteriorQR[4 * i + 3] = qL[lInd + 3][idx];
  }


  roe(fluxL + exIndL, nxL + nIndL, nyL + nIndL, fscaleL + nIndL, qL, exteriorQL, nIndL);

  roe(fluxR + exIndR, nxR + nIndR, nyR + nIndR, fscaleR + nIndR, qR, exteriorQR, nIndR);

}
#endif

// host stub function
void op_par_loop_get_neighbour_q(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14){

  int nargs = 15;
  op_arg args[15];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  //create aligned pointers for dats
  ALIGNED_int const int * __restrict__ ptr0 = (int *) arg0.data;
  DECLARE_PTR_ALIGNED(ptr0,int_ALIGN);
  ALIGNED_double const double * __restrict__ ptr1 = (double *) arg1.data;
  DECLARE_PTR_ALIGNED(ptr1,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr2 = (double *) arg2.data;
  DECLARE_PTR_ALIGNED(ptr2,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr3 = (double *) arg3.data;
  DECLARE_PTR_ALIGNED(ptr3,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr4 = (double *) arg4.data;
  DECLARE_PTR_ALIGNED(ptr4,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr5 = (double *) arg5.data;
  DECLARE_PTR_ALIGNED(ptr5,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr6 = (double *) arg6.data;
  DECLARE_PTR_ALIGNED(ptr6,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr7 = (double *) arg7.data;
  DECLARE_PTR_ALIGNED(ptr7,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr8 = (double *) arg8.data;
  DECLARE_PTR_ALIGNED(ptr8,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr9 = (double *) arg9.data;
  DECLARE_PTR_ALIGNED(ptr9,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr10 = (double *) arg10.data;
  DECLARE_PTR_ALIGNED(ptr10,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr11 = (double *) arg11.data;
  DECLARE_PTR_ALIGNED(ptr11,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr12 = (double *) arg12.data;
  DECLARE_PTR_ALIGNED(ptr12,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr13 = (double *) arg13.data;
  DECLARE_PTR_ALIGNED(ptr13,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr14 = (double *) arg14.data;
  DECLARE_PTR_ALIGNED(ptr14,double_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(4);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: get_neighbour_q\n");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      if ((n+SIMD_VEC >= set->core_size) && (n+SIMD_VEC-set->core_size < SIMD_VEC)) {
        op_mpi_wait_all(nargs, args);
      }
      ALIGNED_int int dat0[2][SIMD_VEC];
      ALIGNED_double double dat1[3][SIMD_VEC];
      ALIGNED_double double dat2[3][SIMD_VEC];
      ALIGNED_double double dat3[3][SIMD_VEC];
      ALIGNED_double double dat4[3][SIMD_VEC];
      ALIGNED_double double dat5[15][SIMD_VEC];
      ALIGNED_double double dat6[15][SIMD_VEC];
      ALIGNED_double double dat7[15][SIMD_VEC];
      ALIGNED_double double dat8[15][SIMD_VEC];
      ALIGNED_double double dat9[15][SIMD_VEC];
      ALIGNED_double double dat10[15][SIMD_VEC];
      ALIGNED_double double dat11[60][SIMD_VEC];
      ALIGNED_double double dat12[60][SIMD_VEC];
      ALIGNED_double double dat13[60][SIMD_VEC];
      ALIGNED_double double dat14[60][SIMD_VEC];
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx0_2 = 2 * (n+i);
        int idx1_3 = 3 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx2_3 = 3 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx3_3 = 3 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx4_3 = 3 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx5_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx6_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx7_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx8_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx9_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx10_15 = 15 * arg1.map_data[(n+i) * arg1.map->dim + 1];
        int idx11_60 = 60 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx12_60 = 60 * arg1.map_data[(n+i) * arg1.map->dim + 1];

        dat0[0][i] = (ptr0)[idx0_2 + 0];
        dat0[1][i] = (ptr0)[idx0_2 + 1];

        dat1[0][i] = (ptr1)[idx1_3 + 0];
        dat1[1][i] = (ptr1)[idx1_3 + 1];
        dat1[2][i] = (ptr1)[idx1_3 + 2];

        dat2[0][i] = (ptr2)[idx2_3 + 0];
        dat2[1][i] = (ptr2)[idx2_3 + 1];
        dat2[2][i] = (ptr2)[idx2_3 + 2];

        dat3[0][i] = (ptr3)[idx3_3 + 0];
        dat3[1][i] = (ptr3)[idx3_3 + 1];
        dat3[2][i] = (ptr3)[idx3_3 + 2];

        dat4[0][i] = (ptr4)[idx4_3 + 0];
        dat4[1][i] = (ptr4)[idx4_3 + 1];
        dat4[2][i] = (ptr4)[idx4_3 + 2];

        dat5[0][i] = (ptr5)[idx5_15 + 0];
        dat5[1][i] = (ptr5)[idx5_15 + 1];
        dat5[2][i] = (ptr5)[idx5_15 + 2];
        dat5[3][i] = (ptr5)[idx5_15 + 3];
        dat5[4][i] = (ptr5)[idx5_15 + 4];
        dat5[5][i] = (ptr5)[idx5_15 + 5];
        dat5[6][i] = (ptr5)[idx5_15 + 6];
        dat5[7][i] = (ptr5)[idx5_15 + 7];
        dat5[8][i] = (ptr5)[idx5_15 + 8];
        dat5[9][i] = (ptr5)[idx5_15 + 9];
        dat5[10][i] = (ptr5)[idx5_15 + 10];
        dat5[11][i] = (ptr5)[idx5_15 + 11];
        dat5[12][i] = (ptr5)[idx5_15 + 12];
        dat5[13][i] = (ptr5)[idx5_15 + 13];
        dat5[14][i] = (ptr5)[idx5_15 + 14];

        dat6[0][i] = (ptr6)[idx6_15 + 0];
        dat6[1][i] = (ptr6)[idx6_15 + 1];
        dat6[2][i] = (ptr6)[idx6_15 + 2];
        dat6[3][i] = (ptr6)[idx6_15 + 3];
        dat6[4][i] = (ptr6)[idx6_15 + 4];
        dat6[5][i] = (ptr6)[idx6_15 + 5];
        dat6[6][i] = (ptr6)[idx6_15 + 6];
        dat6[7][i] = (ptr6)[idx6_15 + 7];
        dat6[8][i] = (ptr6)[idx6_15 + 8];
        dat6[9][i] = (ptr6)[idx6_15 + 9];
        dat6[10][i] = (ptr6)[idx6_15 + 10];
        dat6[11][i] = (ptr6)[idx6_15 + 11];
        dat6[12][i] = (ptr6)[idx6_15 + 12];
        dat6[13][i] = (ptr6)[idx6_15 + 13];
        dat6[14][i] = (ptr6)[idx6_15 + 14];

        dat7[0][i] = (ptr7)[idx7_15 + 0];
        dat7[1][i] = (ptr7)[idx7_15 + 1];
        dat7[2][i] = (ptr7)[idx7_15 + 2];
        dat7[3][i] = (ptr7)[idx7_15 + 3];
        dat7[4][i] = (ptr7)[idx7_15 + 4];
        dat7[5][i] = (ptr7)[idx7_15 + 5];
        dat7[6][i] = (ptr7)[idx7_15 + 6];
        dat7[7][i] = (ptr7)[idx7_15 + 7];
        dat7[8][i] = (ptr7)[idx7_15 + 8];
        dat7[9][i] = (ptr7)[idx7_15 + 9];
        dat7[10][i] = (ptr7)[idx7_15 + 10];
        dat7[11][i] = (ptr7)[idx7_15 + 11];
        dat7[12][i] = (ptr7)[idx7_15 + 12];
        dat7[13][i] = (ptr7)[idx7_15 + 13];
        dat7[14][i] = (ptr7)[idx7_15 + 14];

        dat8[0][i] = (ptr8)[idx8_15 + 0];
        dat8[1][i] = (ptr8)[idx8_15 + 1];
        dat8[2][i] = (ptr8)[idx8_15 + 2];
        dat8[3][i] = (ptr8)[idx8_15 + 3];
        dat8[4][i] = (ptr8)[idx8_15 + 4];
        dat8[5][i] = (ptr8)[idx8_15 + 5];
        dat8[6][i] = (ptr8)[idx8_15 + 6];
        dat8[7][i] = (ptr8)[idx8_15 + 7];
        dat8[8][i] = (ptr8)[idx8_15 + 8];
        dat8[9][i] = (ptr8)[idx8_15 + 9];
        dat8[10][i] = (ptr8)[idx8_15 + 10];
        dat8[11][i] = (ptr8)[idx8_15 + 11];
        dat8[12][i] = (ptr8)[idx8_15 + 12];
        dat8[13][i] = (ptr8)[idx8_15 + 13];
        dat8[14][i] = (ptr8)[idx8_15 + 14];

        dat9[0][i] = (ptr9)[idx9_15 + 0];
        dat9[1][i] = (ptr9)[idx9_15 + 1];
        dat9[2][i] = (ptr9)[idx9_15 + 2];
        dat9[3][i] = (ptr9)[idx9_15 + 3];
        dat9[4][i] = (ptr9)[idx9_15 + 4];
        dat9[5][i] = (ptr9)[idx9_15 + 5];
        dat9[6][i] = (ptr9)[idx9_15 + 6];
        dat9[7][i] = (ptr9)[idx9_15 + 7];
        dat9[8][i] = (ptr9)[idx9_15 + 8];
        dat9[9][i] = (ptr9)[idx9_15 + 9];
        dat9[10][i] = (ptr9)[idx9_15 + 10];
        dat9[11][i] = (ptr9)[idx9_15 + 11];
        dat9[12][i] = (ptr9)[idx9_15 + 12];
        dat9[13][i] = (ptr9)[idx9_15 + 13];
        dat9[14][i] = (ptr9)[idx9_15 + 14];

        dat10[0][i] = (ptr10)[idx10_15 + 0];
        dat10[1][i] = (ptr10)[idx10_15 + 1];
        dat10[2][i] = (ptr10)[idx10_15 + 2];
        dat10[3][i] = (ptr10)[idx10_15 + 3];
        dat10[4][i] = (ptr10)[idx10_15 + 4];
        dat10[5][i] = (ptr10)[idx10_15 + 5];
        dat10[6][i] = (ptr10)[idx10_15 + 6];
        dat10[7][i] = (ptr10)[idx10_15 + 7];
        dat10[8][i] = (ptr10)[idx10_15 + 8];
        dat10[9][i] = (ptr10)[idx10_15 + 9];
        dat10[10][i] = (ptr10)[idx10_15 + 10];
        dat10[11][i] = (ptr10)[idx10_15 + 11];
        dat10[12][i] = (ptr10)[idx10_15 + 12];
        dat10[13][i] = (ptr10)[idx10_15 + 13];
        dat10[14][i] = (ptr10)[idx10_15 + 14];

        dat11[0][i] = (ptr11)[idx11_60 + 0];
        dat11[1][i] = (ptr11)[idx11_60 + 1];
        dat11[2][i] = (ptr11)[idx11_60 + 2];
        dat11[3][i] = (ptr11)[idx11_60 + 3];
        dat11[4][i] = (ptr11)[idx11_60 + 4];
        dat11[5][i] = (ptr11)[idx11_60 + 5];
        dat11[6][i] = (ptr11)[idx11_60 + 6];
        dat11[7][i] = (ptr11)[idx11_60 + 7];
        dat11[8][i] = (ptr11)[idx11_60 + 8];
        dat11[9][i] = (ptr11)[idx11_60 + 9];
        dat11[10][i] = (ptr11)[idx11_60 + 10];
        dat11[11][i] = (ptr11)[idx11_60 + 11];
        dat11[12][i] = (ptr11)[idx11_60 + 12];
        dat11[13][i] = (ptr11)[idx11_60 + 13];
        dat11[14][i] = (ptr11)[idx11_60 + 14];
        dat11[15][i] = (ptr11)[idx11_60 + 15];
        dat11[16][i] = (ptr11)[idx11_60 + 16];
        dat11[17][i] = (ptr11)[idx11_60 + 17];
        dat11[18][i] = (ptr11)[idx11_60 + 18];
        dat11[19][i] = (ptr11)[idx11_60 + 19];
        dat11[20][i] = (ptr11)[idx11_60 + 20];
        dat11[21][i] = (ptr11)[idx11_60 + 21];
        dat11[22][i] = (ptr11)[idx11_60 + 22];
        dat11[23][i] = (ptr11)[idx11_60 + 23];
        dat11[24][i] = (ptr11)[idx11_60 + 24];
        dat11[25][i] = (ptr11)[idx11_60 + 25];
        dat11[26][i] = (ptr11)[idx11_60 + 26];
        dat11[27][i] = (ptr11)[idx11_60 + 27];
        dat11[28][i] = (ptr11)[idx11_60 + 28];
        dat11[29][i] = (ptr11)[idx11_60 + 29];
        dat11[30][i] = (ptr11)[idx11_60 + 30];
        dat11[31][i] = (ptr11)[idx11_60 + 31];
        dat11[32][i] = (ptr11)[idx11_60 + 32];
        dat11[33][i] = (ptr11)[idx11_60 + 33];
        dat11[34][i] = (ptr11)[idx11_60 + 34];
        dat11[35][i] = (ptr11)[idx11_60 + 35];
        dat11[36][i] = (ptr11)[idx11_60 + 36];
        dat11[37][i] = (ptr11)[idx11_60 + 37];
        dat11[38][i] = (ptr11)[idx11_60 + 38];
        dat11[39][i] = (ptr11)[idx11_60 + 39];
        dat11[40][i] = (ptr11)[idx11_60 + 40];
        dat11[41][i] = (ptr11)[idx11_60 + 41];
        dat11[42][i] = (ptr11)[idx11_60 + 42];
        dat11[43][i] = (ptr11)[idx11_60 + 43];
        dat11[44][i] = (ptr11)[idx11_60 + 44];
        dat11[45][i] = (ptr11)[idx11_60 + 45];
        dat11[46][i] = (ptr11)[idx11_60 + 46];
        dat11[47][i] = (ptr11)[idx11_60 + 47];
        dat11[48][i] = (ptr11)[idx11_60 + 48];
        dat11[49][i] = (ptr11)[idx11_60 + 49];
        dat11[50][i] = (ptr11)[idx11_60 + 50];
        dat11[51][i] = (ptr11)[idx11_60 + 51];
        dat11[52][i] = (ptr11)[idx11_60 + 52];
        dat11[53][i] = (ptr11)[idx11_60 + 53];
        dat11[54][i] = (ptr11)[idx11_60 + 54];
        dat11[55][i] = (ptr11)[idx11_60 + 55];
        dat11[56][i] = (ptr11)[idx11_60 + 56];
        dat11[57][i] = (ptr11)[idx11_60 + 57];
        dat11[58][i] = (ptr11)[idx11_60 + 58];
        dat11[59][i] = (ptr11)[idx11_60 + 59];

        dat12[0][i] = (ptr12)[idx12_60 + 0];
        dat12[1][i] = (ptr12)[idx12_60 + 1];
        dat12[2][i] = (ptr12)[idx12_60 + 2];
        dat12[3][i] = (ptr12)[idx12_60 + 3];
        dat12[4][i] = (ptr12)[idx12_60 + 4];
        dat12[5][i] = (ptr12)[idx12_60 + 5];
        dat12[6][i] = (ptr12)[idx12_60 + 6];
        dat12[7][i] = (ptr12)[idx12_60 + 7];
        dat12[8][i] = (ptr12)[idx12_60 + 8];
        dat12[9][i] = (ptr12)[idx12_60 + 9];
        dat12[10][i] = (ptr12)[idx12_60 + 10];
        dat12[11][i] = (ptr12)[idx12_60 + 11];
        dat12[12][i] = (ptr12)[idx12_60 + 12];
        dat12[13][i] = (ptr12)[idx12_60 + 13];
        dat12[14][i] = (ptr12)[idx12_60 + 14];
        dat12[15][i] = (ptr12)[idx12_60 + 15];
        dat12[16][i] = (ptr12)[idx12_60 + 16];
        dat12[17][i] = (ptr12)[idx12_60 + 17];
        dat12[18][i] = (ptr12)[idx12_60 + 18];
        dat12[19][i] = (ptr12)[idx12_60 + 19];
        dat12[20][i] = (ptr12)[idx12_60 + 20];
        dat12[21][i] = (ptr12)[idx12_60 + 21];
        dat12[22][i] = (ptr12)[idx12_60 + 22];
        dat12[23][i] = (ptr12)[idx12_60 + 23];
        dat12[24][i] = (ptr12)[idx12_60 + 24];
        dat12[25][i] = (ptr12)[idx12_60 + 25];
        dat12[26][i] = (ptr12)[idx12_60 + 26];
        dat12[27][i] = (ptr12)[idx12_60 + 27];
        dat12[28][i] = (ptr12)[idx12_60 + 28];
        dat12[29][i] = (ptr12)[idx12_60 + 29];
        dat12[30][i] = (ptr12)[idx12_60 + 30];
        dat12[31][i] = (ptr12)[idx12_60 + 31];
        dat12[32][i] = (ptr12)[idx12_60 + 32];
        dat12[33][i] = (ptr12)[idx12_60 + 33];
        dat12[34][i] = (ptr12)[idx12_60 + 34];
        dat12[35][i] = (ptr12)[idx12_60 + 35];
        dat12[36][i] = (ptr12)[idx12_60 + 36];
        dat12[37][i] = (ptr12)[idx12_60 + 37];
        dat12[38][i] = (ptr12)[idx12_60 + 38];
        dat12[39][i] = (ptr12)[idx12_60 + 39];
        dat12[40][i] = (ptr12)[idx12_60 + 40];
        dat12[41][i] = (ptr12)[idx12_60 + 41];
        dat12[42][i] = (ptr12)[idx12_60 + 42];
        dat12[43][i] = (ptr12)[idx12_60 + 43];
        dat12[44][i] = (ptr12)[idx12_60 + 44];
        dat12[45][i] = (ptr12)[idx12_60 + 45];
        dat12[46][i] = (ptr12)[idx12_60 + 46];
        dat12[47][i] = (ptr12)[idx12_60 + 47];
        dat12[48][i] = (ptr12)[idx12_60 + 48];
        dat12[49][i] = (ptr12)[idx12_60 + 49];
        dat12[50][i] = (ptr12)[idx12_60 + 50];
        dat12[51][i] = (ptr12)[idx12_60 + 51];
        dat12[52][i] = (ptr12)[idx12_60 + 52];
        dat12[53][i] = (ptr12)[idx12_60 + 53];
        dat12[54][i] = (ptr12)[idx12_60 + 54];
        dat12[55][i] = (ptr12)[idx12_60 + 55];
        dat12[56][i] = (ptr12)[idx12_60 + 56];
        dat12[57][i] = (ptr12)[idx12_60 + 57];
        dat12[58][i] = (ptr12)[idx12_60 + 58];
        dat12[59][i] = (ptr12)[idx12_60 + 59];

        dat13[0][i] = 0.0;
        dat13[1][i] = 0.0;
        dat13[2][i] = 0.0;
        dat13[3][i] = 0.0;
        dat13[4][i] = 0.0;
        dat13[5][i] = 0.0;
        dat13[6][i] = 0.0;
        dat13[7][i] = 0.0;
        dat13[8][i] = 0.0;
        dat13[9][i] = 0.0;
        dat13[10][i] = 0.0;
        dat13[11][i] = 0.0;
        dat13[12][i] = 0.0;
        dat13[13][i] = 0.0;
        dat13[14][i] = 0.0;
        dat13[15][i] = 0.0;
        dat13[16][i] = 0.0;
        dat13[17][i] = 0.0;
        dat13[18][i] = 0.0;
        dat13[19][i] = 0.0;
        dat13[20][i] = 0.0;
        dat13[21][i] = 0.0;
        dat13[22][i] = 0.0;
        dat13[23][i] = 0.0;
        dat13[24][i] = 0.0;
        dat13[25][i] = 0.0;
        dat13[26][i] = 0.0;
        dat13[27][i] = 0.0;
        dat13[28][i] = 0.0;
        dat13[29][i] = 0.0;
        dat13[30][i] = 0.0;
        dat13[31][i] = 0.0;
        dat13[32][i] = 0.0;
        dat13[33][i] = 0.0;
        dat13[34][i] = 0.0;
        dat13[35][i] = 0.0;
        dat13[36][i] = 0.0;
        dat13[37][i] = 0.0;
        dat13[38][i] = 0.0;
        dat13[39][i] = 0.0;
        dat13[40][i] = 0.0;
        dat13[41][i] = 0.0;
        dat13[42][i] = 0.0;
        dat13[43][i] = 0.0;
        dat13[44][i] = 0.0;
        dat13[45][i] = 0.0;
        dat13[46][i] = 0.0;
        dat13[47][i] = 0.0;
        dat13[48][i] = 0.0;
        dat13[49][i] = 0.0;
        dat13[50][i] = 0.0;
        dat13[51][i] = 0.0;
        dat13[52][i] = 0.0;
        dat13[53][i] = 0.0;
        dat13[54][i] = 0.0;
        dat13[55][i] = 0.0;
        dat13[56][i] = 0.0;
        dat13[57][i] = 0.0;
        dat13[58][i] = 0.0;
        dat13[59][i] = 0.0;

        dat14[0][i] = 0.0;
        dat14[1][i] = 0.0;
        dat14[2][i] = 0.0;
        dat14[3][i] = 0.0;
        dat14[4][i] = 0.0;
        dat14[5][i] = 0.0;
        dat14[6][i] = 0.0;
        dat14[7][i] = 0.0;
        dat14[8][i] = 0.0;
        dat14[9][i] = 0.0;
        dat14[10][i] = 0.0;
        dat14[11][i] = 0.0;
        dat14[12][i] = 0.0;
        dat14[13][i] = 0.0;
        dat14[14][i] = 0.0;
        dat14[15][i] = 0.0;
        dat14[16][i] = 0.0;
        dat14[17][i] = 0.0;
        dat14[18][i] = 0.0;
        dat14[19][i] = 0.0;
        dat14[20][i] = 0.0;
        dat14[21][i] = 0.0;
        dat14[22][i] = 0.0;
        dat14[23][i] = 0.0;
        dat14[24][i] = 0.0;
        dat14[25][i] = 0.0;
        dat14[26][i] = 0.0;
        dat14[27][i] = 0.0;
        dat14[28][i] = 0.0;
        dat14[29][i] = 0.0;
        dat14[30][i] = 0.0;
        dat14[31][i] = 0.0;
        dat14[32][i] = 0.0;
        dat14[33][i] = 0.0;
        dat14[34][i] = 0.0;
        dat14[35][i] = 0.0;
        dat14[36][i] = 0.0;
        dat14[37][i] = 0.0;
        dat14[38][i] = 0.0;
        dat14[39][i] = 0.0;
        dat14[40][i] = 0.0;
        dat14[41][i] = 0.0;
        dat14[42][i] = 0.0;
        dat14[43][i] = 0.0;
        dat14[44][i] = 0.0;
        dat14[45][i] = 0.0;
        dat14[46][i] = 0.0;
        dat14[47][i] = 0.0;
        dat14[48][i] = 0.0;
        dat14[49][i] = 0.0;
        dat14[50][i] = 0.0;
        dat14[51][i] = 0.0;
        dat14[52][i] = 0.0;
        dat14[53][i] = 0.0;
        dat14[54][i] = 0.0;
        dat14[55][i] = 0.0;
        dat14[56][i] = 0.0;
        dat14[57][i] = 0.0;
        dat14[58][i] = 0.0;
        dat14[59][i] = 0.0;

      }
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        get_neighbour_q_vec(
          dat0,
          dat1,
          dat2,
          dat3,
          dat4,
          dat5,
          dat6,
          dat7,
          dat8,
          dat9,
          dat10,
          dat11,
          dat12,
          dat13,
          dat14,
          i);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx13_60 = 60 * arg1.map_data[(n+i) * arg1.map->dim + 0];
        int idx14_60 = 60 * arg1.map_data[(n+i) * arg1.map->dim + 1];

        (ptr13)[idx13_60 + 0] += dat13[0][i];
        (ptr13)[idx13_60 + 1] += dat13[1][i];
        (ptr13)[idx13_60 + 2] += dat13[2][i];
        (ptr13)[idx13_60 + 3] += dat13[3][i];
        (ptr13)[idx13_60 + 4] += dat13[4][i];
        (ptr13)[idx13_60 + 5] += dat13[5][i];
        (ptr13)[idx13_60 + 6] += dat13[6][i];
        (ptr13)[idx13_60 + 7] += dat13[7][i];
        (ptr13)[idx13_60 + 8] += dat13[8][i];
        (ptr13)[idx13_60 + 9] += dat13[9][i];
        (ptr13)[idx13_60 + 10] += dat13[10][i];
        (ptr13)[idx13_60 + 11] += dat13[11][i];
        (ptr13)[idx13_60 + 12] += dat13[12][i];
        (ptr13)[idx13_60 + 13] += dat13[13][i];
        (ptr13)[idx13_60 + 14] += dat13[14][i];
        (ptr13)[idx13_60 + 15] += dat13[15][i];
        (ptr13)[idx13_60 + 16] += dat13[16][i];
        (ptr13)[idx13_60 + 17] += dat13[17][i];
        (ptr13)[idx13_60 + 18] += dat13[18][i];
        (ptr13)[idx13_60 + 19] += dat13[19][i];
        (ptr13)[idx13_60 + 20] += dat13[20][i];
        (ptr13)[idx13_60 + 21] += dat13[21][i];
        (ptr13)[idx13_60 + 22] += dat13[22][i];
        (ptr13)[idx13_60 + 23] += dat13[23][i];
        (ptr13)[idx13_60 + 24] += dat13[24][i];
        (ptr13)[idx13_60 + 25] += dat13[25][i];
        (ptr13)[idx13_60 + 26] += dat13[26][i];
        (ptr13)[idx13_60 + 27] += dat13[27][i];
        (ptr13)[idx13_60 + 28] += dat13[28][i];
        (ptr13)[idx13_60 + 29] += dat13[29][i];
        (ptr13)[idx13_60 + 30] += dat13[30][i];
        (ptr13)[idx13_60 + 31] += dat13[31][i];
        (ptr13)[idx13_60 + 32] += dat13[32][i];
        (ptr13)[idx13_60 + 33] += dat13[33][i];
        (ptr13)[idx13_60 + 34] += dat13[34][i];
        (ptr13)[idx13_60 + 35] += dat13[35][i];
        (ptr13)[idx13_60 + 36] += dat13[36][i];
        (ptr13)[idx13_60 + 37] += dat13[37][i];
        (ptr13)[idx13_60 + 38] += dat13[38][i];
        (ptr13)[idx13_60 + 39] += dat13[39][i];
        (ptr13)[idx13_60 + 40] += dat13[40][i];
        (ptr13)[idx13_60 + 41] += dat13[41][i];
        (ptr13)[idx13_60 + 42] += dat13[42][i];
        (ptr13)[idx13_60 + 43] += dat13[43][i];
        (ptr13)[idx13_60 + 44] += dat13[44][i];
        (ptr13)[idx13_60 + 45] += dat13[45][i];
        (ptr13)[idx13_60 + 46] += dat13[46][i];
        (ptr13)[idx13_60 + 47] += dat13[47][i];
        (ptr13)[idx13_60 + 48] += dat13[48][i];
        (ptr13)[idx13_60 + 49] += dat13[49][i];
        (ptr13)[idx13_60 + 50] += dat13[50][i];
        (ptr13)[idx13_60 + 51] += dat13[51][i];
        (ptr13)[idx13_60 + 52] += dat13[52][i];
        (ptr13)[idx13_60 + 53] += dat13[53][i];
        (ptr13)[idx13_60 + 54] += dat13[54][i];
        (ptr13)[idx13_60 + 55] += dat13[55][i];
        (ptr13)[idx13_60 + 56] += dat13[56][i];
        (ptr13)[idx13_60 + 57] += dat13[57][i];
        (ptr13)[idx13_60 + 58] += dat13[58][i];
        (ptr13)[idx13_60 + 59] += dat13[59][i];

        (ptr14)[idx14_60 + 0] += dat14[0][i];
        (ptr14)[idx14_60 + 1] += dat14[1][i];
        (ptr14)[idx14_60 + 2] += dat14[2][i];
        (ptr14)[idx14_60 + 3] += dat14[3][i];
        (ptr14)[idx14_60 + 4] += dat14[4][i];
        (ptr14)[idx14_60 + 5] += dat14[5][i];
        (ptr14)[idx14_60 + 6] += dat14[6][i];
        (ptr14)[idx14_60 + 7] += dat14[7][i];
        (ptr14)[idx14_60 + 8] += dat14[8][i];
        (ptr14)[idx14_60 + 9] += dat14[9][i];
        (ptr14)[idx14_60 + 10] += dat14[10][i];
        (ptr14)[idx14_60 + 11] += dat14[11][i];
        (ptr14)[idx14_60 + 12] += dat14[12][i];
        (ptr14)[idx14_60 + 13] += dat14[13][i];
        (ptr14)[idx14_60 + 14] += dat14[14][i];
        (ptr14)[idx14_60 + 15] += dat14[15][i];
        (ptr14)[idx14_60 + 16] += dat14[16][i];
        (ptr14)[idx14_60 + 17] += dat14[17][i];
        (ptr14)[idx14_60 + 18] += dat14[18][i];
        (ptr14)[idx14_60 + 19] += dat14[19][i];
        (ptr14)[idx14_60 + 20] += dat14[20][i];
        (ptr14)[idx14_60 + 21] += dat14[21][i];
        (ptr14)[idx14_60 + 22] += dat14[22][i];
        (ptr14)[idx14_60 + 23] += dat14[23][i];
        (ptr14)[idx14_60 + 24] += dat14[24][i];
        (ptr14)[idx14_60 + 25] += dat14[25][i];
        (ptr14)[idx14_60 + 26] += dat14[26][i];
        (ptr14)[idx14_60 + 27] += dat14[27][i];
        (ptr14)[idx14_60 + 28] += dat14[28][i];
        (ptr14)[idx14_60 + 29] += dat14[29][i];
        (ptr14)[idx14_60 + 30] += dat14[30][i];
        (ptr14)[idx14_60 + 31] += dat14[31][i];
        (ptr14)[idx14_60 + 32] += dat14[32][i];
        (ptr14)[idx14_60 + 33] += dat14[33][i];
        (ptr14)[idx14_60 + 34] += dat14[34][i];
        (ptr14)[idx14_60 + 35] += dat14[35][i];
        (ptr14)[idx14_60 + 36] += dat14[36][i];
        (ptr14)[idx14_60 + 37] += dat14[37][i];
        (ptr14)[idx14_60 + 38] += dat14[38][i];
        (ptr14)[idx14_60 + 39] += dat14[39][i];
        (ptr14)[idx14_60 + 40] += dat14[40][i];
        (ptr14)[idx14_60 + 41] += dat14[41][i];
        (ptr14)[idx14_60 + 42] += dat14[42][i];
        (ptr14)[idx14_60 + 43] += dat14[43][i];
        (ptr14)[idx14_60 + 44] += dat14[44][i];
        (ptr14)[idx14_60 + 45] += dat14[45][i];
        (ptr14)[idx14_60 + 46] += dat14[46][i];
        (ptr14)[idx14_60 + 47] += dat14[47][i];
        (ptr14)[idx14_60 + 48] += dat14[48][i];
        (ptr14)[idx14_60 + 49] += dat14[49][i];
        (ptr14)[idx14_60 + 50] += dat14[50][i];
        (ptr14)[idx14_60 + 51] += dat14[51][i];
        (ptr14)[idx14_60 + 52] += dat14[52][i];
        (ptr14)[idx14_60 + 53] += dat14[53][i];
        (ptr14)[idx14_60 + 54] += dat14[54][i];
        (ptr14)[idx14_60 + 55] += dat14[55][i];
        (ptr14)[idx14_60 + 56] += dat14[56][i];
        (ptr14)[idx14_60 + 57] += dat14[57][i];
        (ptr14)[idx14_60 + 58] += dat14[58][i];
        (ptr14)[idx14_60 + 59] += dat14[59][i];

      }
    }

    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      if (n==set->core_size) {
        op_mpi_wait_all(nargs, args);
      }
      int map1idx;
      int map3idx;
      map1idx = arg1.map_data[n * arg1.map->dim + 0];
      map3idx = arg1.map_data[n * arg1.map->dim + 1];

      get_neighbour_q(
        &(ptr0)[2 * n],
        &(ptr1)[3 * map1idx],
        &(ptr2)[3 * map1idx],
        &(ptr3)[3 * map3idx],
        &(ptr4)[3 * map3idx],
        &(ptr5)[15 * map1idx],
        &(ptr6)[15 * map1idx],
        &(ptr7)[15 * map3idx],
        &(ptr8)[15 * map3idx],
        &(ptr9)[15 * map1idx],
        &(ptr10)[15 * map3idx],
        &(ptr11)[60 * map1idx],
        &(ptr12)[60 * map3idx],
        &(ptr13)[60 * map1idx],
        &(ptr14)[60 * map3idx]);
    }
  }

  if (exec_size == 0 || exec_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[4].name      = name;
  OP_kernels[4].count    += 1;
  OP_kernels[4].time     += wall_t2 - wall_t1;
  OP_kernels[4].transfer += (float)set->size * arg1.size;
  OP_kernels[4].transfer += (float)set->size * arg2.size;
  OP_kernels[4].transfer += (float)set->size * arg5.size;
  OP_kernels[4].transfer += (float)set->size * arg6.size;
  OP_kernels[4].transfer += (float)set->size * arg11.size;
  OP_kernels[4].transfer += (float)set->size * arg13.size * 2.0f;
  OP_kernels[4].transfer += (float)set->size * arg0.size;
  OP_kernels[4].transfer += (float)set->size * arg1.map->dim * 4.0f;
}
