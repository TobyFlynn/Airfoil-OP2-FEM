//
// auto-generated by op2.py
//

//user function
inline void calc_dt(const double *q, const double *fscale, double *dt1) {
  double dt1_arr[3 * 5];
  for(int i = 0; i < 3 * 5; i++) {
    double rho = q[FMASK[i] * 4];
    double u = q[FMASK[i] * 4 + 1] / rho;
    double v = q[FMASK[i] * 4 + 2] / rho;
    double p = (gam - 1.0) * (q[FMASK[i] * 4 + 3] - rho * (u * u + v * v) * 0.5);
    double c = sqrt(abs(gam * p / rho));
    dt1_arr[i] = ((4 + 1) * (4 + 1)) * 0.5 * fscale[FMASK[i]] *(sqrt(u * u + v * v) + c);
  }

  // Find local max
  double max = *dt1;
  for(int i = 0; i < 3 * 5; i++) {
    if(dt1_arr[i] > max) {
      max = dt1_arr[i];
    }
  }
  *dt1 = max;
}

// host stub function
void op_par_loop_calc_dt(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  int nargs = 3;
  op_arg args[3];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  //create aligned pointers for dats
  ALIGNED_double const double * __restrict__ ptr0 = (double *) arg0.data;
  DECLARE_PTR_ALIGNED(ptr0,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr1 = (double *) arg1.data;
  DECLARE_PTR_ALIGNED(ptr1,double_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  calc_dt");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      double dat2[SIMD_VEC];
      for ( int i=0; i<SIMD_VEC; i++ ){
        dat2[i] = -INFINITY;
      }
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        calc_dt(
          &(ptr0)[60 * (n+i)],
          &(ptr1)[15 * (n+i)],
          &dat2[i]);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
        *(double*)arg2.data = MAX(*(double*)arg2.data,dat2[i]);
      }
    }
    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      calc_dt(
        &(ptr0)[60*n],
        &(ptr1)[15*n],
        (double*)arg2.data);
    }
  }

  // combine reduction data
  op_mpi_reduce(&arg2,(double*)arg2.data);
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;
  OP_kernels[3].time     += wall_t2 - wall_t1;
  OP_kernels[3].transfer += (float)set->size * arg0.size;
  OP_kernels[3].transfer += (float)set->size * arg1.size;
}
