//
// auto-generated by op2.py
//

//user function
// #include <cblas.h>

inline void init_grid(const double *n0, const double *n1, const double *n2,
                      double *nodeX, double *nodeY, const double *xr,
                      const double *yr, const double *xs, const double *ys,
                      double *rx, double *ry, double *sx, double *sy,
                      double *nx, double *ny, double *fscale) {
  // Calculate the solution point coordinates

  nodeX[0] = n0[0];
  nodeX[1] = n1[0];
  nodeX[2] = n2[0];
  nodeY[0] = n0[1];
  nodeY[1] = n1[1];
  nodeY[2] = n2[1];

  // J = -xs.*yr + xr.*ys
  double J[15];
  for(int i = 0; i < 15; i++) {
    J[i] = -xs[i] * yr[i] + xr[i] * ys[i];
  }

  // rx = ys./J; sx =-yr./J; ry =-xs./J; sy = xr./J;
  for(int i = 0; i < 15; i++) {
    rx[i] = ys[i] / J[i];
    sx[i] = -yr[i] / J[i];
    ry[i] = -xs[i] / J[i];
    sy[i] = xr[i] / J[i];
  }

  // Calculate normals

  // Face 0
  for(int i = 0; i < 5; i++) {
    nx[i] = yr[FMASK[i]];
    ny[i] = -xr[FMASK[i]];
  }
  // Face 1
  for(int i = 0; i < 5; i++) {
    nx[5 + i] = ys[FMASK[5 + i]] - yr[FMASK[5 + i]];
    ny[5 + i] = xr[FMASK[5 + i]] - xs[FMASK[5 + i]];
  }
  // Face 2
  for(int i = 0; i < 5; i++) {
    nx[2 * 5 + i] = -ys[FMASK[2 * 5 + i]];
    ny[2 * 5 + i] = xs[FMASK[2 * 5 + i]];
  }

  // Normalise
  for(int i = 0; i < 3 * 5; i++) {
    double sJ = sqrt(nx[i] * nx[i] + ny[i] * ny[i]);
    nx[i] = nx[i] / sJ;
    ny[i] = ny[i] / sJ;
    fscale[i] = sJ / J[FMASK[i]];
  }
}
#ifdef VECTORIZE
//user function -- modified for vectorisation
#if defined __clang__ || defined __GNUC__
__attribute__((always_inline))
#endif
inline void init_grid_vec( const double n0[][SIMD_VEC], const double n1[][SIMD_VEC], const double n2[][SIMD_VEC], double nodeX[][SIMD_VEC], double nodeY[][SIMD_VEC], const double xr[][SIMD_VEC], const double yr[][SIMD_VEC], const double xs[][SIMD_VEC], const double ys[][SIMD_VEC], double rx[][SIMD_VEC], double ry[][SIMD_VEC], double sx[][SIMD_VEC], double sy[][SIMD_VEC], double nx[][SIMD_VEC], double ny[][SIMD_VEC], double fscale[][SIMD_VEC], int idx ) {


  nodeX[0][idx] = n0[0][idx];
  nodeX[1][idx] = n1[0][idx];
  nodeX[2][idx] = n2[0][idx];
  nodeY[0][idx] = n0[1][idx];
  nodeY[1][idx] = n1[1][idx];
  nodeY[2][idx] = n2[1][idx];

  double J[15];
  for(int i = 0; i < 15; i++) {
    J[i] = -xs[i][idx] * yr[i][idx] + xr[i][idx] * ys[i][idx];
  }

  for(int i = 0; i < 15; i++) {
    rx[i][idx] = ys[i][idx] / J[i];
    sx[i][idx] = -yr[i][idx] / J[i];
    ry[i][idx] = -xs[i][idx] / J[i];
    sy[i][idx] = xr[i][idx] / J[i];
  }


  for(int i = 0; i < 5; i++) {
    nx[i][idx] = yr[FMASK[i]];
    ny[i][idx] = -xr[FMASK[i]];
  }

  for(int i = 0; i < 5; i++) {
    nx[5 + i][idx] = ys[FMASK[5 + i]] - yr[FMASK[5 + i]];
    ny[5 + i][idx] = xr[FMASK[5 + i]] - xs[FMASK[5 + i]];
  }

  for(int i = 0; i < 5; i++) {
    nx[2 * 5 + i][idx] = -ys[FMASK[2 * 5 + i]];
    ny[2 * 5 + i][idx] = xs[FMASK[2 * 5 + i]];
  }

  for(int i = 0; i < 3 * 5; i++) {
    double sJ = sqrt(nx[i][idx] * nx[i][idx] + ny[i][idx] * ny[i][idx]);
    nx[i][idx] = nx[i][idx] / sJ;
    ny[i][idx] = ny[i][idx] / sJ;
    fscale[i][idx] = sJ / J[FMASK[i]];
  }

}
#endif

// host stub function
void op_par_loop_init_grid(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15){

  int nargs = 16;
  op_arg args[16];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  //create aligned pointers for dats
  ALIGNED_double const double * __restrict__ ptr0 = (double *) arg0.data;
  DECLARE_PTR_ALIGNED(ptr0,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr1 = (double *) arg1.data;
  DECLARE_PTR_ALIGNED(ptr1,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr2 = (double *) arg2.data;
  DECLARE_PTR_ALIGNED(ptr2,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr3 = (double *) arg3.data;
  DECLARE_PTR_ALIGNED(ptr3,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr4 = (double *) arg4.data;
  DECLARE_PTR_ALIGNED(ptr4,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr5 = (double *) arg5.data;
  DECLARE_PTR_ALIGNED(ptr5,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr6 = (double *) arg6.data;
  DECLARE_PTR_ALIGNED(ptr6,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr7 = (double *) arg7.data;
  DECLARE_PTR_ALIGNED(ptr7,double_ALIGN);
  ALIGNED_double const double * __restrict__ ptr8 = (double *) arg8.data;
  DECLARE_PTR_ALIGNED(ptr8,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr9 = (double *) arg9.data;
  DECLARE_PTR_ALIGNED(ptr9,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr10 = (double *) arg10.data;
  DECLARE_PTR_ALIGNED(ptr10,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr11 = (double *) arg11.data;
  DECLARE_PTR_ALIGNED(ptr11,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr12 = (double *) arg12.data;
  DECLARE_PTR_ALIGNED(ptr12,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr13 = (double *) arg13.data;
  DECLARE_PTR_ALIGNED(ptr13,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr14 = (double *) arg14.data;
  DECLARE_PTR_ALIGNED(ptr14,double_ALIGN);
  ALIGNED_double       double * __restrict__ ptr15 = (double *) arg15.data;
  DECLARE_PTR_ALIGNED(ptr15,double_ALIGN);

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(0);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: init_grid\n");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);

  if (exec_size >0) {

    #ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      if ((n+SIMD_VEC >= set->core_size) && (n+SIMD_VEC-set->core_size < SIMD_VEC)) {
        op_mpi_wait_all(nargs, args);
      }
      ALIGNED_double double dat0[2][SIMD_VEC];
      ALIGNED_double double dat1[2][SIMD_VEC];
      ALIGNED_double double dat2[2][SIMD_VEC];
      ALIGNED_double double dat3[3][SIMD_VEC];
      ALIGNED_double double dat4[3][SIMD_VEC];
      ALIGNED_double double dat5[15][SIMD_VEC];
      ALIGNED_double double dat6[15][SIMD_VEC];
      ALIGNED_double double dat7[15][SIMD_VEC];
      ALIGNED_double double dat8[15][SIMD_VEC];
      ALIGNED_double double dat9[15][SIMD_VEC];
      ALIGNED_double double dat10[15][SIMD_VEC];
      ALIGNED_double double dat11[15][SIMD_VEC];
      ALIGNED_double double dat12[15][SIMD_VEC];
      ALIGNED_double double dat13[15][SIMD_VEC];
      ALIGNED_double double dat14[15][SIMD_VEC];
      ALIGNED_double double dat15[15][SIMD_VEC];
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx0_2 = 2 * arg0.map_data[(n+i) * arg0.map->dim + 0];
        int idx1_2 = 2 * arg0.map_data[(n+i) * arg0.map->dim + 1];
        int idx2_2 = 2 * arg0.map_data[(n+i) * arg0.map->dim + 2];
        int idx3_3 = 3 * (n+i);
        int idx4_3 = 3 * (n+i);
        int idx5_15 = 15 * (n+i);
        int idx6_15 = 15 * (n+i);
        int idx7_15 = 15 * (n+i);
        int idx8_15 = 15 * (n+i);
        int idx9_15 = 15 * (n+i);
        int idx10_15 = 15 * (n+i);
        int idx11_15 = 15 * (n+i);
        int idx12_15 = 15 * (n+i);
        int idx13_15 = 15 * (n+i);
        int idx14_15 = 15 * (n+i);
        int idx15_15 = 15 * (n+i);

        dat0[0][i] = (ptr0)[idx0_2 + 0];
        dat0[1][i] = (ptr0)[idx0_2 + 1];

        dat1[0][i] = (ptr1)[idx1_2 + 0];
        dat1[1][i] = (ptr1)[idx1_2 + 1];

        dat2[0][i] = (ptr2)[idx2_2 + 0];
        dat2[1][i] = (ptr2)[idx2_2 + 1];

        dat5[0][i] = (ptr5)[idx5_15 + 0];
        dat5[1][i] = (ptr5)[idx5_15 + 1];
        dat5[2][i] = (ptr5)[idx5_15 + 2];
        dat5[3][i] = (ptr5)[idx5_15 + 3];
        dat5[4][i] = (ptr5)[idx5_15 + 4];
        dat5[5][i] = (ptr5)[idx5_15 + 5];
        dat5[6][i] = (ptr5)[idx5_15 + 6];
        dat5[7][i] = (ptr5)[idx5_15 + 7];
        dat5[8][i] = (ptr5)[idx5_15 + 8];
        dat5[9][i] = (ptr5)[idx5_15 + 9];
        dat5[10][i] = (ptr5)[idx5_15 + 10];
        dat5[11][i] = (ptr5)[idx5_15 + 11];
        dat5[12][i] = (ptr5)[idx5_15 + 12];
        dat5[13][i] = (ptr5)[idx5_15 + 13];
        dat5[14][i] = (ptr5)[idx5_15 + 14];

        dat6[0][i] = (ptr6)[idx6_15 + 0];
        dat6[1][i] = (ptr6)[idx6_15 + 1];
        dat6[2][i] = (ptr6)[idx6_15 + 2];
        dat6[3][i] = (ptr6)[idx6_15 + 3];
        dat6[4][i] = (ptr6)[idx6_15 + 4];
        dat6[5][i] = (ptr6)[idx6_15 + 5];
        dat6[6][i] = (ptr6)[idx6_15 + 6];
        dat6[7][i] = (ptr6)[idx6_15 + 7];
        dat6[8][i] = (ptr6)[idx6_15 + 8];
        dat6[9][i] = (ptr6)[idx6_15 + 9];
        dat6[10][i] = (ptr6)[idx6_15 + 10];
        dat6[11][i] = (ptr6)[idx6_15 + 11];
        dat6[12][i] = (ptr6)[idx6_15 + 12];
        dat6[13][i] = (ptr6)[idx6_15 + 13];
        dat6[14][i] = (ptr6)[idx6_15 + 14];

        dat7[0][i] = (ptr7)[idx7_15 + 0];
        dat7[1][i] = (ptr7)[idx7_15 + 1];
        dat7[2][i] = (ptr7)[idx7_15 + 2];
        dat7[3][i] = (ptr7)[idx7_15 + 3];
        dat7[4][i] = (ptr7)[idx7_15 + 4];
        dat7[5][i] = (ptr7)[idx7_15 + 5];
        dat7[6][i] = (ptr7)[idx7_15 + 6];
        dat7[7][i] = (ptr7)[idx7_15 + 7];
        dat7[8][i] = (ptr7)[idx7_15 + 8];
        dat7[9][i] = (ptr7)[idx7_15 + 9];
        dat7[10][i] = (ptr7)[idx7_15 + 10];
        dat7[11][i] = (ptr7)[idx7_15 + 11];
        dat7[12][i] = (ptr7)[idx7_15 + 12];
        dat7[13][i] = (ptr7)[idx7_15 + 13];
        dat7[14][i] = (ptr7)[idx7_15 + 14];

        dat8[0][i] = (ptr8)[idx8_15 + 0];
        dat8[1][i] = (ptr8)[idx8_15 + 1];
        dat8[2][i] = (ptr8)[idx8_15 + 2];
        dat8[3][i] = (ptr8)[idx8_15 + 3];
        dat8[4][i] = (ptr8)[idx8_15 + 4];
        dat8[5][i] = (ptr8)[idx8_15 + 5];
        dat8[6][i] = (ptr8)[idx8_15 + 6];
        dat8[7][i] = (ptr8)[idx8_15 + 7];
        dat8[8][i] = (ptr8)[idx8_15 + 8];
        dat8[9][i] = (ptr8)[idx8_15 + 9];
        dat8[10][i] = (ptr8)[idx8_15 + 10];
        dat8[11][i] = (ptr8)[idx8_15 + 11];
        dat8[12][i] = (ptr8)[idx8_15 + 12];
        dat8[13][i] = (ptr8)[idx8_15 + 13];
        dat8[14][i] = (ptr8)[idx8_15 + 14];

      }
      #pragma omp simd simdlen(SIMD_VEC)
      for ( int i=0; i<SIMD_VEC; i++ ){
        init_grid_vec(
          dat0,
          dat1,
          dat2,
          dat3,
          dat4,
          dat5,
          dat6,
          dat7,
          dat8,
          dat9,
          dat10,
          dat11,
          dat12,
          dat13,
          dat14,
          dat15,
          i);
      }
      for ( int i=0; i<SIMD_VEC; i++ ){
        int idx3_3 = 3 * (n+i);
        int idx4_3 = 3 * (n+i);
        int idx9_15 = 15 * (n+i);
        int idx10_15 = 15 * (n+i);
        int idx11_15 = 15 * (n+i);
        int idx12_15 = 15 * (n+i);
        int idx13_15 = 15 * (n+i);
        int idx14_15 = 15 * (n+i);
        int idx15_15 = 15 * (n+i);

        (ptr3)[idx3_3 + 0] = dat3[0][i];
        (ptr3)[idx3_3 + 1] = dat3[1][i];
        (ptr3)[idx3_3 + 2] = dat3[2][i];

        (ptr4)[idx4_3 + 0] = dat4[0][i];
        (ptr4)[idx4_3 + 1] = dat4[1][i];
        (ptr4)[idx4_3 + 2] = dat4[2][i];

        (ptr9)[idx9_15 + 0] = dat9[0][i];
        (ptr9)[idx9_15 + 1] = dat9[1][i];
        (ptr9)[idx9_15 + 2] = dat9[2][i];
        (ptr9)[idx9_15 + 3] = dat9[3][i];
        (ptr9)[idx9_15 + 4] = dat9[4][i];
        (ptr9)[idx9_15 + 5] = dat9[5][i];
        (ptr9)[idx9_15 + 6] = dat9[6][i];
        (ptr9)[idx9_15 + 7] = dat9[7][i];
        (ptr9)[idx9_15 + 8] = dat9[8][i];
        (ptr9)[idx9_15 + 9] = dat9[9][i];
        (ptr9)[idx9_15 + 10] = dat9[10][i];
        (ptr9)[idx9_15 + 11] = dat9[11][i];
        (ptr9)[idx9_15 + 12] = dat9[12][i];
        (ptr9)[idx9_15 + 13] = dat9[13][i];
        (ptr9)[idx9_15 + 14] = dat9[14][i];

        (ptr10)[idx10_15 + 0] = dat10[0][i];
        (ptr10)[idx10_15 + 1] = dat10[1][i];
        (ptr10)[idx10_15 + 2] = dat10[2][i];
        (ptr10)[idx10_15 + 3] = dat10[3][i];
        (ptr10)[idx10_15 + 4] = dat10[4][i];
        (ptr10)[idx10_15 + 5] = dat10[5][i];
        (ptr10)[idx10_15 + 6] = dat10[6][i];
        (ptr10)[idx10_15 + 7] = dat10[7][i];
        (ptr10)[idx10_15 + 8] = dat10[8][i];
        (ptr10)[idx10_15 + 9] = dat10[9][i];
        (ptr10)[idx10_15 + 10] = dat10[10][i];
        (ptr10)[idx10_15 + 11] = dat10[11][i];
        (ptr10)[idx10_15 + 12] = dat10[12][i];
        (ptr10)[idx10_15 + 13] = dat10[13][i];
        (ptr10)[idx10_15 + 14] = dat10[14][i];

        (ptr11)[idx11_15 + 0] = dat11[0][i];
        (ptr11)[idx11_15 + 1] = dat11[1][i];
        (ptr11)[idx11_15 + 2] = dat11[2][i];
        (ptr11)[idx11_15 + 3] = dat11[3][i];
        (ptr11)[idx11_15 + 4] = dat11[4][i];
        (ptr11)[idx11_15 + 5] = dat11[5][i];
        (ptr11)[idx11_15 + 6] = dat11[6][i];
        (ptr11)[idx11_15 + 7] = dat11[7][i];
        (ptr11)[idx11_15 + 8] = dat11[8][i];
        (ptr11)[idx11_15 + 9] = dat11[9][i];
        (ptr11)[idx11_15 + 10] = dat11[10][i];
        (ptr11)[idx11_15 + 11] = dat11[11][i];
        (ptr11)[idx11_15 + 12] = dat11[12][i];
        (ptr11)[idx11_15 + 13] = dat11[13][i];
        (ptr11)[idx11_15 + 14] = dat11[14][i];

        (ptr12)[idx12_15 + 0] = dat12[0][i];
        (ptr12)[idx12_15 + 1] = dat12[1][i];
        (ptr12)[idx12_15 + 2] = dat12[2][i];
        (ptr12)[idx12_15 + 3] = dat12[3][i];
        (ptr12)[idx12_15 + 4] = dat12[4][i];
        (ptr12)[idx12_15 + 5] = dat12[5][i];
        (ptr12)[idx12_15 + 6] = dat12[6][i];
        (ptr12)[idx12_15 + 7] = dat12[7][i];
        (ptr12)[idx12_15 + 8] = dat12[8][i];
        (ptr12)[idx12_15 + 9] = dat12[9][i];
        (ptr12)[idx12_15 + 10] = dat12[10][i];
        (ptr12)[idx12_15 + 11] = dat12[11][i];
        (ptr12)[idx12_15 + 12] = dat12[12][i];
        (ptr12)[idx12_15 + 13] = dat12[13][i];
        (ptr12)[idx12_15 + 14] = dat12[14][i];

        (ptr13)[idx13_15 + 0] = dat13[0][i];
        (ptr13)[idx13_15 + 1] = dat13[1][i];
        (ptr13)[idx13_15 + 2] = dat13[2][i];
        (ptr13)[idx13_15 + 3] = dat13[3][i];
        (ptr13)[idx13_15 + 4] = dat13[4][i];
        (ptr13)[idx13_15 + 5] = dat13[5][i];
        (ptr13)[idx13_15 + 6] = dat13[6][i];
        (ptr13)[idx13_15 + 7] = dat13[7][i];
        (ptr13)[idx13_15 + 8] = dat13[8][i];
        (ptr13)[idx13_15 + 9] = dat13[9][i];
        (ptr13)[idx13_15 + 10] = dat13[10][i];
        (ptr13)[idx13_15 + 11] = dat13[11][i];
        (ptr13)[idx13_15 + 12] = dat13[12][i];
        (ptr13)[idx13_15 + 13] = dat13[13][i];
        (ptr13)[idx13_15 + 14] = dat13[14][i];

        (ptr14)[idx14_15 + 0] = dat14[0][i];
        (ptr14)[idx14_15 + 1] = dat14[1][i];
        (ptr14)[idx14_15 + 2] = dat14[2][i];
        (ptr14)[idx14_15 + 3] = dat14[3][i];
        (ptr14)[idx14_15 + 4] = dat14[4][i];
        (ptr14)[idx14_15 + 5] = dat14[5][i];
        (ptr14)[idx14_15 + 6] = dat14[6][i];
        (ptr14)[idx14_15 + 7] = dat14[7][i];
        (ptr14)[idx14_15 + 8] = dat14[8][i];
        (ptr14)[idx14_15 + 9] = dat14[9][i];
        (ptr14)[idx14_15 + 10] = dat14[10][i];
        (ptr14)[idx14_15 + 11] = dat14[11][i];
        (ptr14)[idx14_15 + 12] = dat14[12][i];
        (ptr14)[idx14_15 + 13] = dat14[13][i];
        (ptr14)[idx14_15 + 14] = dat14[14][i];

        (ptr15)[idx15_15 + 0] = dat15[0][i];
        (ptr15)[idx15_15 + 1] = dat15[1][i];
        (ptr15)[idx15_15 + 2] = dat15[2][i];
        (ptr15)[idx15_15 + 3] = dat15[3][i];
        (ptr15)[idx15_15 + 4] = dat15[4][i];
        (ptr15)[idx15_15 + 5] = dat15[5][i];
        (ptr15)[idx15_15 + 6] = dat15[6][i];
        (ptr15)[idx15_15 + 7] = dat15[7][i];
        (ptr15)[idx15_15 + 8] = dat15[8][i];
        (ptr15)[idx15_15 + 9] = dat15[9][i];
        (ptr15)[idx15_15 + 10] = dat15[10][i];
        (ptr15)[idx15_15 + 11] = dat15[11][i];
        (ptr15)[idx15_15 + 12] = dat15[12][i];
        (ptr15)[idx15_15 + 13] = dat15[13][i];
        (ptr15)[idx15_15 + 14] = dat15[14][i];

      }
    }

    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
    #else
    for ( int n=0; n<exec_size; n++ ){
    #endif
      if (n==set->core_size) {
        op_mpi_wait_all(nargs, args);
      }
      int map0idx;
      int map1idx;
      int map2idx;
      map0idx = arg0.map_data[n * arg0.map->dim + 0];
      map1idx = arg0.map_data[n * arg0.map->dim + 1];
      map2idx = arg0.map_data[n * arg0.map->dim + 2];

      init_grid(
        &(ptr0)[2 * map0idx],
        &(ptr1)[2 * map1idx],
        &(ptr2)[2 * map2idx],
        &(ptr3)[3 * n],
        &(ptr4)[3 * n],
        &(ptr5)[15 * n],
        &(ptr6)[15 * n],
        &(ptr7)[15 * n],
        &(ptr8)[15 * n],
        &(ptr9)[15 * n],
        &(ptr10)[15 * n],
        &(ptr11)[15 * n],
        &(ptr12)[15 * n],
        &(ptr13)[15 * n],
        &(ptr14)[15 * n],
        &(ptr15)[15 * n]);
    }
  }

  if (exec_size == 0 || exec_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[0].name      = name;
  OP_kernels[0].count    += 1;
  OP_kernels[0].time     += wall_t2 - wall_t1;
  OP_kernels[0].transfer += (float)set->size * arg0.size;
  OP_kernels[0].transfer += (float)set->size * arg3.size;
  OP_kernels[0].transfer += (float)set->size * arg4.size;
  OP_kernels[0].transfer += (float)set->size * arg5.size;
  OP_kernels[0].transfer += (float)set->size * arg6.size;
  OP_kernels[0].transfer += (float)set->size * arg7.size;
  OP_kernels[0].transfer += (float)set->size * arg8.size;
  OP_kernels[0].transfer += (float)set->size * arg9.size;
  OP_kernels[0].transfer += (float)set->size * arg10.size;
  OP_kernels[0].transfer += (float)set->size * arg11.size;
  OP_kernels[0].transfer += (float)set->size * arg12.size;
  OP_kernels[0].transfer += (float)set->size * arg13.size;
  OP_kernels[0].transfer += (float)set->size * arg14.size;
  OP_kernels[0].transfer += (float)set->size * arg15.size;
  OP_kernels[0].transfer += (float)set->size * arg0.map->dim * 4.0f;
}
