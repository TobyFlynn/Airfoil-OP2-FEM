//
// auto-generated by op2.py
//

#define double_ALIGN 128
#define float_ALIGN 64
#define int_ALIGN 64
#ifdef VECTORIZE
#define SIMD_VEC 4
#define ALIGNED_double __attribute__((aligned(double_ALIGN)))
#define ALIGNED_float __attribute__((aligned(float_ALIGN)))
#define ALIGNED_int __attribute__((aligned(int_ALIGN)))
  #ifdef __ICC
    #define DECLARE_PTR_ALIGNED(X, Y) __assume_aligned(X, Y)
  #else
    #define DECLARE_PTR_ALIGNED(X, Y)
  #endif
#else
#define ALIGNED_double
#define ALIGNED_float
#define ALIGNED_int
#define DECLARE_PTR_ALIGNED(X, Y)
#endif

// global constants
extern double gam;
extern double bc_mach;
extern double bc_alpha;
extern double bc_p;
extern double bc_r;
extern double bc_u;
extern double bc_v;
extern double bc_e;
extern double ones[15];
extern double r[15];
extern double s[15];
extern double Dr[225];
extern double Ds[225];
extern double Drw[225];
extern double Dsw[225];
extern int FMASK[15];
extern double LIFT[225];

// header
#include "op_lib_cpp.h"

// user kernel files
#include "init_grid_veckernel.cpp"
#include "set_ic_veckernel.cpp"
#include "neighbour_zero_veckernel.cpp"
#include "calc_dt_veckernel.cpp"
#include "get_neighbour_q_veckernel.cpp"
#include "get_bedge_q_veckernel.cpp"
#include "internal_fluxes_veckernel.cpp"
#include "euler_rhs_veckernel.cpp"
#include "set_workingQ_veckernel.cpp"
#include "update_Q_veckernel.cpp"
