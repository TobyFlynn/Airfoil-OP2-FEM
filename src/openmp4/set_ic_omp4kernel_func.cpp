//
// auto-generated by op2.py
//

void set_ic_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size]) \
    map(to: bc_r_ompkernel, bc_u_ompkernel, bc_e_ompkernel, r_ompkernel[:15])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    double *q = &data0[60*n_op];
    double *workingQ = &data1[60*n_op];

    //inline function
    
    for(int i = 0; i < 15; i++) {
      q[i * 4]     = bc_r_ompkernel;
      q[i * 4 + 1] = bc_r_ompkernel * bc_u_ompkernel;
      q[i * 4 + 2] = 0.0;
      q[i * 4 + 3] = bc_e_ompkernel;
      workingQ[i * 4]     = q[i * 4];
      workingQ[i * 4 + 1] = q[i * 4 + 1];
      workingQ[i * 4 + 2] = q[i * 4 + 2];
      workingQ[i * 4 + 3] = q[i * 4 + 3];
    }
    //end inline func
  }

}
