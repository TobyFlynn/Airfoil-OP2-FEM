//
// auto-generated by op2.py
//

void set_workingQ_omp4_kernel(
  double *arg0,
  int *arg1,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  int count,
  int num_teams,
  int nthread){

  double arg0_l = *arg0;
  int arg1_l = *arg1;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *dt = &arg0_l;
    const int *stage = &arg1_l;
    const double *q = &data2[60*n_op];
    const double *k1 = &data3[60*n_op];
    const double *k2 = &data4[60*n_op];
    double *workingQ = &data5[60*n_op];

    //inline function
    
    if(*stage == 0) {
      for(int i = 0; i < 4 * 15; i++) {
        workingQ[i] = q[i] + (*dt) * k1[i];
      }
    } else {
      for(int i = 0; i < 4 * 15; i++) {
        workingQ[i] = q[i] + (*dt) * (k1[i] / 4.0 + k2[i] / 4.0);
      }
    }
    //end inline func
  }

  *arg0 = arg0_l;
  *arg1 = arg1_l;
}
