//
// auto-generated by op2.py
//

#include <algorithm>
#include <cmath>

void euler_rhs_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  double *data9,
  int dat9size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size],data9[0:dat9size]) \
    map(to: FMASK_ompkernel[:15])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *q = &data0[60*n_op];
    double *exteriorQ = &data1[60*n_op];
    const double *rx = &data2[15*n_op];
    const double *ry = &data3[15*n_op];
    const double *sx = &data4[15*n_op];
    const double *sy = &data5[15*n_op];
    const double *fscale = &data6[15*n_op];
    const double *nx = &data7[15*n_op];
    const double *ny = &data8[15*n_op];
    double *qRHS = &data9[60*n_op];

    //inline function
    
    double F[4 * 15];
    double G[4 * 15];
    for(int i = 0; i < 15; i++) {
      double rho, u, v, p;
      euler_flux(&q[i * 4], &F[i * 4], &G[i * 4], &rho, &u, &v, &p);
    }

    for(int i = 0; i < 4; i++) {
      double dFdr[15];
      double dFds[15];
      double dGdr[15];
      double dGds[15];





      for(int j = 0; j < 15; j++) {

      }
    }

    double mQ[4 * 3 * 5];
    double mF[4 * 3 * 5];
    double mG[4 * 3 * 5];
    double mRho[3 * 5];
    double mU[3 * 5];
    double mV[3 * 5];
    double mP[3 * 5];

    for(int i = 0; i < 3 * 5; i++) {
      int ind = FMASK_ompkernel[i] * 4;
      mQ[i * 4]     = q[ind];
      mQ[i * 4 + 1] = q[ind + 1];
      mQ[i * 4 + 2] = q[ind + 2];
      mQ[i * 4 + 3] = q[ind + 3];

      euler_flux(&mQ[i * 4], &mF[i * 4], &mG[i * 4], &mRho[i], &mU[i], &mV[i], &mP[i]);
    }

    double pF[4 * 3 * 5];
    double pG[4 * 3 * 5];
    double pRho[3 * 5];
    double pU[3 * 5];
    double pV[3 * 5];
    double pP[3 * 5];
    for(int i = 0; i < 3 * 5; i++) {
      euler_flux(&exteriorQ[i * 4], &pF[i * 4], &pG[i * 4], &pRho[i], &pU[i], &pV[i], &pP[i]);
    }

    double flux[4 * 3 * 5];

    roe(flux, nx, ny, fscale, q, exteriorQ);

    for(int i = 0; i < 4; i++) {

    }

    for(int i = 0; i < 4 * 3 * 5; i++) {
      exteriorQ[i] = 0.0;
    }
    //end inline func
  }

}
