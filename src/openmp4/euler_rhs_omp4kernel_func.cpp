//
// auto-generated by op2.py
//

#include <cblas.h>
#include <cmath>
#include "fluxes.h"

void euler_rhs_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size],data6[0:dat6size]) \
    map(to: Drw_ompkernel[:225], Dsw_ompkernel[:225], LIFT_ompkernel[:225])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *q = &data0[60*n_op];
    double *flux = &data1[60*n_op];
    const double *rx = &data2[15*n_op];
    const double *ry = &data3[15*n_op];
    const double *sx = &data4[15*n_op];
    const double *sy = &data5[15*n_op];
    double *qRHS = &data6[60*n_op];

    //inline function
    
    double F[4 * 15];
    double G[4 * 15];
    for(int i = 0; i < 15; i++) {
      double rho, u, v, p;
      euler_flux(&q[i * 4], &F[i * 4], &G[i * 4], &rho, &u, &v, &p);
    }

    for(int i = 0; i < 4; i++) {
      double dFdr[15];
      double dFds[15];
      double dGdr[15];
      double dGds[15];

      cblas_dgemv(CblasRowMajor, CblasNoTrans, 15, 15, 1.0, Drw_ompkernel, 15, &F[i], 4, 0.0, dFdr, 1);
      cblas_dgemv(CblasRowMajor, CblasNoTrans, 15, 15, 1.0, Dsw_ompkernel, 15, &F[i], 4, 0.0, dFds, 1);
      cblas_dgemv(CblasRowMajor, CblasNoTrans, 15, 15, 1.0, Drw_ompkernel, 15, &G[i], 4, 0.0, dGdr, 1);
      cblas_dgemv(CblasRowMajor, CblasNoTrans, 15, 15, 1.0, Dsw_ompkernel, 15, &G[i], 4, 0.0, dGds, 1);

      for(int j = 0; j < 15; j++) {
        qRHS[i + j * 4] = (rx[j] * dFdr[j] + sx[j] * dFds[j]) + (ry[j] * dGdr[j] + sy[j] * dGds[j]);
      }
    }

    for(int i = 0; i < 4; i++) {
      cblas_dgemv(CblasRowMajor, CblasNoTrans, 15, 15, -1.0, LIFT_ompkernel, 15, flux + i, 4, 1.0, qRHS + i, 4);
    }

    for(int i = 0; i < 4 * 3 * 5; i++) {
      flux[i] = 0.0;
    }
    //end inline func
  }

}
