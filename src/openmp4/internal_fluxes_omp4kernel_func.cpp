//
// auto-generated by op2.py
//

#include "fluxes.h"

void internal_fluxes_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *q = &data0[60*n_op];
    double *F = &data1[60*n_op];
    double *G = &data2[60*n_op];

    //inline function
    
    for(int i = 0; i < 15; i++) {
      double rho, u, v, p;
      euler_flux(&q[i * 4], &F[i * 4], &G[i * 4], &rho, &u, &v, &p);
    }
    //end inline func
  }

}
