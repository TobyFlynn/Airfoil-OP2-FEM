//
// auto-generated by op2.py
//

void update_Q_omp4_kernel(
  double *arg0,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  double *data9,
  int dat9size,
  double *data10,
  int dat10size,
  double *data11,
  int dat11size,
  double *data12,
  int dat12size,
  double *data13,
  int dat13size,
  double *data14,
  int dat14size,
  double *data15,
  int dat15size,
  double *data16,
  int dat16size,
  double *data17,
  int dat17size,
  double *data18,
  int dat18size,
  double *data19,
  int dat19size,
  double *data20,
  int dat20size,
  int count,
  int num_teams,
  int nthread){

  double arg0_l = *arg0;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size],data9[0:dat9size],data10[0:dat10size],data11[0:dat11size],data12[0:dat12size],data13[0:dat13size],data14[0:dat14size],data15[0:dat15size],data16[0:dat16size],data17[0:dat17size],data18[0:dat18size],data19[0:dat19size],data20[0:dat20size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *dt = &arg0_l;
    double *q0 = &data1[15*n_op];
    double *q1 = &data2[15*n_op];
    double *q2 = &data3[15*n_op];
    double *q3 = &data4[15*n_op];
    const double *rk10 = &data5[15*n_op];
    const double *rk11 = &data6[15*n_op];
    const double *rk12 = &data7[15*n_op];
    const double *rk13 = &data8[15*n_op];
    const double *rk20 = &data9[15*n_op];
    const double *rk21 = &data10[15*n_op];
    const double *rk22 = &data11[15*n_op];
    const double *rk23 = &data12[15*n_op];
    const double *rk30 = &data13[15*n_op];
    const double *rk31 = &data14[15*n_op];
    const double *rk32 = &data15[15*n_op];
    const double *rk33 = &data16[15*n_op];
    double *workingQ0 = &data17[15*n_op];
    double *workingQ1 = &data18[15*n_op];
    double *workingQ2 = &data19[15*n_op];
    double *workingQ3 = &data20[15*n_op];

    //inline function
    
    for(int i = 0; i < 15; i++) {
      q0[i] = q0[i] + (*dt) * (rk10[i]/ 6.0 + rk20[i] / 6.0 + 2.0 * rk30[i] / 3.0);
      workingQ0[i] = q0[i];
      q1[i] = q1[i] + (*dt) * (rk11[i]/ 6.0 + rk21[i] / 6.0 + 2.0 * rk31[i] / 3.0);
      workingQ1[i] = q1[i];
      q2[i] = q2[i] + (*dt) * (rk12[i]/ 6.0 + rk22[i] / 6.0 + 2.0 * rk32[i] / 3.0);
      workingQ2[i] = q2[i];
      q3[i] = q3[i] + (*dt) * (rk13[i]/ 6.0 + rk23[i] / 6.0 + 2.0 * rk33[i] / 3.0);
      workingQ3[i] = q3[i];
    }
    //end inline func
  }

  *arg0 = arg0_l;
}
