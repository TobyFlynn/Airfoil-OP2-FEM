//
// auto-generated by op2.py
//

//user function
//user function

void euler_rhs_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  double *data9,
  int dat9size,
  double *data10,
  int dat10size,
  double *data11,
  int dat11size,
  double *data12,
  int dat12size,
  double *data13,
  int dat13size,
  double *data14,
  int dat14size,
  double *data15,
  int dat15size,
  double *data16,
  int dat16size,
  double *data17,
  int dat17size,
  double *data18,
  int dat18size,
  double *data19,
  int dat19size,
  double *data20,
  int dat20size,
  double *data21,
  int dat21size,
  double *data22,
  int dat22size,
  double *data23,
  int dat23size,
  double *data24,
  int dat24size,
  double *data25,
  int dat25size,
  double *data26,
  int dat26size,
  double *data27,
  int dat27size,
  double *data28,
  int dat28size,
  double *data29,
  int dat29size,
  double *data30,
  int dat30size,
  double *data31,
  int dat31size,
  double *data32,
  int dat32size,
  double *data33,
  int dat33size,
  double *data34,
  int dat34size,
  double *data35,
  int dat35size,
  double *data36,
  int dat36size,
  double *data37,
  int dat37size,
  double *data38,
  int dat38size,
  int count,
  int num_teams,
  int nthread);

// host stub function
void op_par_loop_euler_rhs(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20,
  op_arg arg21,
  op_arg arg22,
  op_arg arg23,
  op_arg arg24,
  op_arg arg25,
  op_arg arg26,
  op_arg arg27,
  op_arg arg28,
  op_arg arg29,
  op_arg arg30,
  op_arg arg31,
  op_arg arg32,
  op_arg arg33,
  op_arg arg34,
  op_arg arg35,
  op_arg arg36,
  op_arg arg37,
  op_arg arg38){

  int nargs = 39;
  op_arg args[39];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  args[16] = arg16;
  args[17] = arg17;
  args[18] = arg18;
  args[19] = arg19;
  args[20] = arg20;
  args[21] = arg21;
  args[22] = arg22;
  args[23] = arg23;
  args[24] = arg24;
  args[25] = arg25;
  args[26] = arg26;
  args[27] = arg27;
  args[28] = arg28;
  args[29] = arg29;
  args[30] = arg30;
  args[31] = arg31;
  args[32] = arg32;
  args[33] = arg33;
  args[34] = arg34;
  args[35] = arg35;
  args[36] = arg36;
  args[37] = arg37;
  args[38] = arg38;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(8);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[8].name      = name;
  OP_kernels[8].count    += 1;


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  euler_rhs");
  }

  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);

  #ifdef OP_PART_SIZE_8
    int part_size = OP_PART_SIZE_8;
  #else
    int part_size = OP_part_size;
  #endif
  #ifdef OP_BLOCK_SIZE_8
    int nthread = OP_BLOCK_SIZE_8;
  #else
    int nthread = OP_block_size;
  #endif


  if (set_size >0) {

    //Set up typed device pointers for OpenMP

    double* data0 = (double*)arg0.data_d;
    int dat0size = getSetSizeFromOpArg(&arg0) * arg0.dat->dim;
    double* data1 = (double*)arg1.data_d;
    int dat1size = getSetSizeFromOpArg(&arg1) * arg1.dat->dim;
    double* data2 = (double*)arg2.data_d;
    int dat2size = getSetSizeFromOpArg(&arg2) * arg2.dat->dim;
    double* data3 = (double*)arg3.data_d;
    int dat3size = getSetSizeFromOpArg(&arg3) * arg3.dat->dim;
    double* data4 = (double*)arg4.data_d;
    int dat4size = getSetSizeFromOpArg(&arg4) * arg4.dat->dim;
    double* data5 = (double*)arg5.data_d;
    int dat5size = getSetSizeFromOpArg(&arg5) * arg5.dat->dim;
    double* data6 = (double*)arg6.data_d;
    int dat6size = getSetSizeFromOpArg(&arg6) * arg6.dat->dim;
    double* data7 = (double*)arg7.data_d;
    int dat7size = getSetSizeFromOpArg(&arg7) * arg7.dat->dim;
    double* data8 = (double*)arg8.data_d;
    int dat8size = getSetSizeFromOpArg(&arg8) * arg8.dat->dim;
    double* data9 = (double*)arg9.data_d;
    int dat9size = getSetSizeFromOpArg(&arg9) * arg9.dat->dim;
    double* data10 = (double*)arg10.data_d;
    int dat10size = getSetSizeFromOpArg(&arg10) * arg10.dat->dim;
    double* data11 = (double*)arg11.data_d;
    int dat11size = getSetSizeFromOpArg(&arg11) * arg11.dat->dim;
    double* data12 = (double*)arg12.data_d;
    int dat12size = getSetSizeFromOpArg(&arg12) * arg12.dat->dim;
    double* data13 = (double*)arg13.data_d;
    int dat13size = getSetSizeFromOpArg(&arg13) * arg13.dat->dim;
    double* data14 = (double*)arg14.data_d;
    int dat14size = getSetSizeFromOpArg(&arg14) * arg14.dat->dim;
    double* data15 = (double*)arg15.data_d;
    int dat15size = getSetSizeFromOpArg(&arg15) * arg15.dat->dim;
    double* data16 = (double*)arg16.data_d;
    int dat16size = getSetSizeFromOpArg(&arg16) * arg16.dat->dim;
    double* data17 = (double*)arg17.data_d;
    int dat17size = getSetSizeFromOpArg(&arg17) * arg17.dat->dim;
    double* data18 = (double*)arg18.data_d;
    int dat18size = getSetSizeFromOpArg(&arg18) * arg18.dat->dim;
    double* data19 = (double*)arg19.data_d;
    int dat19size = getSetSizeFromOpArg(&arg19) * arg19.dat->dim;
    double* data20 = (double*)arg20.data_d;
    int dat20size = getSetSizeFromOpArg(&arg20) * arg20.dat->dim;
    double* data21 = (double*)arg21.data_d;
    int dat21size = getSetSizeFromOpArg(&arg21) * arg21.dat->dim;
    double* data22 = (double*)arg22.data_d;
    int dat22size = getSetSizeFromOpArg(&arg22) * arg22.dat->dim;
    double* data23 = (double*)arg23.data_d;
    int dat23size = getSetSizeFromOpArg(&arg23) * arg23.dat->dim;
    double* data24 = (double*)arg24.data_d;
    int dat24size = getSetSizeFromOpArg(&arg24) * arg24.dat->dim;
    double* data25 = (double*)arg25.data_d;
    int dat25size = getSetSizeFromOpArg(&arg25) * arg25.dat->dim;
    double* data26 = (double*)arg26.data_d;
    int dat26size = getSetSizeFromOpArg(&arg26) * arg26.dat->dim;
    double* data27 = (double*)arg27.data_d;
    int dat27size = getSetSizeFromOpArg(&arg27) * arg27.dat->dim;
    double* data28 = (double*)arg28.data_d;
    int dat28size = getSetSizeFromOpArg(&arg28) * arg28.dat->dim;
    double* data29 = (double*)arg29.data_d;
    int dat29size = getSetSizeFromOpArg(&arg29) * arg29.dat->dim;
    double* data30 = (double*)arg30.data_d;
    int dat30size = getSetSizeFromOpArg(&arg30) * arg30.dat->dim;
    double* data31 = (double*)arg31.data_d;
    int dat31size = getSetSizeFromOpArg(&arg31) * arg31.dat->dim;
    double* data32 = (double*)arg32.data_d;
    int dat32size = getSetSizeFromOpArg(&arg32) * arg32.dat->dim;
    double* data33 = (double*)arg33.data_d;
    int dat33size = getSetSizeFromOpArg(&arg33) * arg33.dat->dim;
    double* data34 = (double*)arg34.data_d;
    int dat34size = getSetSizeFromOpArg(&arg34) * arg34.dat->dim;
    double* data35 = (double*)arg35.data_d;
    int dat35size = getSetSizeFromOpArg(&arg35) * arg35.dat->dim;
    double* data36 = (double*)arg36.data_d;
    int dat36size = getSetSizeFromOpArg(&arg36) * arg36.dat->dim;
    double* data37 = (double*)arg37.data_d;
    int dat37size = getSetSizeFromOpArg(&arg37) * arg37.dat->dim;
    double* data38 = (double*)arg38.data_d;
    int dat38size = getSetSizeFromOpArg(&arg38) * arg38.dat->dim;
    euler_rhs_omp4_kernel(
      data0,
      dat0size,
      data1,
      dat1size,
      data2,
      dat2size,
      data3,
      dat3size,
      data4,
      dat4size,
      data5,
      dat5size,
      data6,
      dat6size,
      data7,
      dat7size,
      data8,
      dat8size,
      data9,
      dat9size,
      data10,
      dat10size,
      data11,
      dat11size,
      data12,
      dat12size,
      data13,
      dat13size,
      data14,
      dat14size,
      data15,
      dat15size,
      data16,
      dat16size,
      data17,
      dat17size,
      data18,
      dat18size,
      data19,
      dat19size,
      data20,
      dat20size,
      data21,
      dat21size,
      data22,
      dat22size,
      data23,
      dat23size,
      data24,
      dat24size,
      data25,
      dat25size,
      data26,
      dat26size,
      data27,
      dat27size,
      data28,
      dat28size,
      data29,
      dat29size,
      data30,
      dat30size,
      data31,
      dat31size,
      data32,
      dat32size,
      data33,
      dat33size,
      data34,
      dat34size,
      data35,
      dat35size,
      data36,
      dat36size,
      data37,
      dat37size,
      data38,
      dat38size,
      set->size,
      part_size!=0?(set->size-1)/part_size+1:(set->size-1)/nthread,
      nthread);

  }

  // combine reduction data
  op_mpi_set_dirtybit_cuda(nargs, args);

  if (OP_diags>1) deviceSync();
  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[8].time     += wall_t2 - wall_t1;
  OP_kernels[8].transfer += (float)set->size * arg0.size;
  OP_kernels[8].transfer += (float)set->size * arg1.size;
  OP_kernels[8].transfer += (float)set->size * arg2.size;
  OP_kernels[8].transfer += (float)set->size * arg3.size;
  OP_kernels[8].transfer += (float)set->size * arg4.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg5.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg6.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg7.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg8.size;
  OP_kernels[8].transfer += (float)set->size * arg9.size;
  OP_kernels[8].transfer += (float)set->size * arg10.size;
  OP_kernels[8].transfer += (float)set->size * arg11.size;
  OP_kernels[8].transfer += (float)set->size * arg12.size;
  OP_kernels[8].transfer += (float)set->size * arg13.size;
  OP_kernels[8].transfer += (float)set->size * arg14.size;
  OP_kernels[8].transfer += (float)set->size * arg15.size;
  OP_kernels[8].transfer += (float)set->size * arg16.size;
  OP_kernels[8].transfer += (float)set->size * arg17.size;
  OP_kernels[8].transfer += (float)set->size * arg18.size;
  OP_kernels[8].transfer += (float)set->size * arg19.size;
  OP_kernels[8].transfer += (float)set->size * arg20.size;
  OP_kernels[8].transfer += (float)set->size * arg21.size;
  OP_kernels[8].transfer += (float)set->size * arg22.size;
  OP_kernels[8].transfer += (float)set->size * arg23.size;
  OP_kernels[8].transfer += (float)set->size * arg24.size;
  OP_kernels[8].transfer += (float)set->size * arg25.size;
  OP_kernels[8].transfer += (float)set->size * arg26.size;
  OP_kernels[8].transfer += (float)set->size * arg27.size;
  OP_kernels[8].transfer += (float)set->size * arg28.size;
  OP_kernels[8].transfer += (float)set->size * arg29.size;
  OP_kernels[8].transfer += (float)set->size * arg30.size;
  OP_kernels[8].transfer += (float)set->size * arg31.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg32.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg33.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg34.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg35.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg36.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg37.size * 2.0f;
  OP_kernels[8].transfer += (float)set->size * arg38.size * 2.0f;
}
