//
// auto-generated by op2.py
//

//user function
__device__ void get_neighbour_q_gpu( const int *edgeNum, const double *xL,
                            const double *yL, const double *xR,
                            const double *yR, const double *qL0,
                            const double *qL1, const double *qL2,
                            const double *qL3, const double *qR0,
                            const double *qR1, const double *qR2,
                            const double *qR3, double *exteriorQL0,
                            double *exteriorQL1, double *exteriorQL2,
                            double *exteriorQL3, double *exteriorQR0,
                            double *exteriorQR1, double *exteriorQR2,
                            double *exteriorQR3) {

  int edgeL = edgeNum[0];
  int edgeR = edgeNum[1];
  bool reverse;

  if(edgeR == 0) {
    if(edgeL == 0) {
      reverse = !(xL[0] == xR[0] && yL[0] == yR[0]);
    } else if(edgeL == 1) {
      reverse = !(xL[1] == xR[0] && yL[1] == yR[0]);
    } else {
      reverse = !(xL[2] == xR[0] && yL[2] == yR[0]);
    }
  } else if(edgeR == 1) {
    if(edgeL == 0) {
      reverse = !(xL[0] == xR[1] && yL[0] == yR[1]);
    } else if(edgeL == 1) {
      reverse = !(xL[1] == xR[1] && yL[1] == yR[1]);
    } else {
      reverse = !(xL[2] == xR[1] && yL[2] == yR[1]);
    }
  } else {
    if(edgeL == 0) {
      reverse = !(xL[0] == xR[2] && yL[0] == yR[2]);
    } else if(edgeL == 1) {
      reverse = !(xL[1] == xR[2] && yL[1] == yR[2]);
    } else {
      reverse = !(xL[2] == xR[2] && yL[2] == yR[2]);
    }
  }

  int exInd = 0;
  if(edgeL == 1) exInd = 5;
  else if(edgeL == 2) exInd = 2 * 5;

  int *fmask;

  if(edgeR == 0) {
    fmask = FMASK_cuda;
  } else if(edgeR == 1) {
    fmask = &FMASK_cuda[5];
  } else {
    fmask = &FMASK_cuda[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int rInd;
    if(reverse) {
      rInd = fmask[5 - i - 1];
    } else {
      rInd = fmask[i];
    }
    exteriorQL0[exInd + i] += qR0[rInd];
    exteriorQL1[exInd + i] += qR1[rInd];
    exteriorQL2[exInd + i] += qR2[rInd];
    exteriorQL3[exInd + i] += qR3[rInd];
  }

  exInd = 0;
  if(edgeR == 1) exInd = 5;
  else if(edgeR == 2) exInd = 2 * 5;

  if(edgeL == 0) {
    fmask = FMASK_cuda;
  } else if(edgeL == 1) {
    fmask = &FMASK_cuda[5];
  } else {
    fmask = &FMASK_cuda[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int lInd;
    if(reverse) {
      lInd = fmask[5 - i - 1];
    } else {
      lInd = fmask[i];
    }
    exteriorQR0[exInd + i] += qL0[lInd];
    exteriorQR1[exInd + i] += qL1[lInd];
    exteriorQR2[exInd + i] += qL2[lInd];
    exteriorQR3[exInd + i] += qL3[lInd];
  }

}

// CUDA kernel function
__global__ void op_cuda_get_neighbour_q(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  const double *__restrict ind_arg3,
  const double *__restrict ind_arg4,
  const double *__restrict ind_arg5,
  double *__restrict ind_arg6,
  double *__restrict ind_arg7,
  double *__restrict ind_arg8,
  double *__restrict ind_arg9,
  const int *__restrict opDat1Map,
  const int *__restrict arg0,
  int start,
  int end,
  int   set_size) {
  double arg13_l[15];
  double arg14_l[15];
  double arg15_l[15];
  double arg16_l[15];
  double arg17_l[15];
  double arg18_l[15];
  double arg19_l[15];
  double arg20_l[15];
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg13_l[15];
    for ( int d=0; d<15; d++ ){
      arg13_l[d] = ZERO_double;
    }
    double arg14_l[15];
    for ( int d=0; d<15; d++ ){
      arg14_l[d] = ZERO_double;
    }
    double arg15_l[15];
    for ( int d=0; d<15; d++ ){
      arg15_l[d] = ZERO_double;
    }
    double arg16_l[15];
    for ( int d=0; d<15; d++ ){
      arg16_l[d] = ZERO_double;
    }
    double arg17_l[15];
    for ( int d=0; d<15; d++ ){
      arg17_l[d] = ZERO_double;
    }
    double arg18_l[15];
    for ( int d=0; d<15; d++ ){
      arg18_l[d] = ZERO_double;
    }
    double arg19_l[15];
    for ( int d=0; d<15; d++ ){
      arg19_l[d] = ZERO_double;
    }
    double arg20_l[15];
    for ( int d=0; d<15; d++ ){
      arg20_l[d] = ZERO_double;
    }
    int map1idx;
    int map3idx;
    map1idx = opDat1Map[n + set_size * 0];
    map3idx = opDat1Map[n + set_size * 1];

    //user-supplied kernel call
    get_neighbour_q_gpu(arg0+n*2,
                    ind_arg0+map1idx*3,
                    ind_arg1+map1idx*3,
                    ind_arg0+map3idx*3,
                    ind_arg1+map3idx*3,
                    ind_arg2+map1idx*15,
                    ind_arg3+map1idx*15,
                    ind_arg4+map1idx*15,
                    ind_arg5+map1idx*15,
                    ind_arg2+map3idx*15,
                    ind_arg3+map3idx*15,
                    ind_arg4+map3idx*15,
                    ind_arg5+map3idx*15,
                    arg13_l,
                    arg14_l,
                    arg15_l,
                    arg16_l,
                    arg17_l,
                    arg18_l,
                    arg19_l,
                    arg20_l);
    atomicAdd(&ind_arg6[0+map1idx*15],arg13_l[0]);
    atomicAdd(&ind_arg6[1+map1idx*15],arg13_l[1]);
    atomicAdd(&ind_arg6[2+map1idx*15],arg13_l[2]);
    atomicAdd(&ind_arg6[3+map1idx*15],arg13_l[3]);
    atomicAdd(&ind_arg6[4+map1idx*15],arg13_l[4]);
    atomicAdd(&ind_arg6[5+map1idx*15],arg13_l[5]);
    atomicAdd(&ind_arg6[6+map1idx*15],arg13_l[6]);
    atomicAdd(&ind_arg6[7+map1idx*15],arg13_l[7]);
    atomicAdd(&ind_arg6[8+map1idx*15],arg13_l[8]);
    atomicAdd(&ind_arg6[9+map1idx*15],arg13_l[9]);
    atomicAdd(&ind_arg6[10+map1idx*15],arg13_l[10]);
    atomicAdd(&ind_arg6[11+map1idx*15],arg13_l[11]);
    atomicAdd(&ind_arg6[12+map1idx*15],arg13_l[12]);
    atomicAdd(&ind_arg6[13+map1idx*15],arg13_l[13]);
    atomicAdd(&ind_arg6[14+map1idx*15],arg13_l[14]);
    atomicAdd(&ind_arg7[0+map1idx*15],arg14_l[0]);
    atomicAdd(&ind_arg7[1+map1idx*15],arg14_l[1]);
    atomicAdd(&ind_arg7[2+map1idx*15],arg14_l[2]);
    atomicAdd(&ind_arg7[3+map1idx*15],arg14_l[3]);
    atomicAdd(&ind_arg7[4+map1idx*15],arg14_l[4]);
    atomicAdd(&ind_arg7[5+map1idx*15],arg14_l[5]);
    atomicAdd(&ind_arg7[6+map1idx*15],arg14_l[6]);
    atomicAdd(&ind_arg7[7+map1idx*15],arg14_l[7]);
    atomicAdd(&ind_arg7[8+map1idx*15],arg14_l[8]);
    atomicAdd(&ind_arg7[9+map1idx*15],arg14_l[9]);
    atomicAdd(&ind_arg7[10+map1idx*15],arg14_l[10]);
    atomicAdd(&ind_arg7[11+map1idx*15],arg14_l[11]);
    atomicAdd(&ind_arg7[12+map1idx*15],arg14_l[12]);
    atomicAdd(&ind_arg7[13+map1idx*15],arg14_l[13]);
    atomicAdd(&ind_arg7[14+map1idx*15],arg14_l[14]);
    atomicAdd(&ind_arg8[0+map1idx*15],arg15_l[0]);
    atomicAdd(&ind_arg8[1+map1idx*15],arg15_l[1]);
    atomicAdd(&ind_arg8[2+map1idx*15],arg15_l[2]);
    atomicAdd(&ind_arg8[3+map1idx*15],arg15_l[3]);
    atomicAdd(&ind_arg8[4+map1idx*15],arg15_l[4]);
    atomicAdd(&ind_arg8[5+map1idx*15],arg15_l[5]);
    atomicAdd(&ind_arg8[6+map1idx*15],arg15_l[6]);
    atomicAdd(&ind_arg8[7+map1idx*15],arg15_l[7]);
    atomicAdd(&ind_arg8[8+map1idx*15],arg15_l[8]);
    atomicAdd(&ind_arg8[9+map1idx*15],arg15_l[9]);
    atomicAdd(&ind_arg8[10+map1idx*15],arg15_l[10]);
    atomicAdd(&ind_arg8[11+map1idx*15],arg15_l[11]);
    atomicAdd(&ind_arg8[12+map1idx*15],arg15_l[12]);
    atomicAdd(&ind_arg8[13+map1idx*15],arg15_l[13]);
    atomicAdd(&ind_arg8[14+map1idx*15],arg15_l[14]);
    atomicAdd(&ind_arg9[0+map1idx*15],arg16_l[0]);
    atomicAdd(&ind_arg9[1+map1idx*15],arg16_l[1]);
    atomicAdd(&ind_arg9[2+map1idx*15],arg16_l[2]);
    atomicAdd(&ind_arg9[3+map1idx*15],arg16_l[3]);
    atomicAdd(&ind_arg9[4+map1idx*15],arg16_l[4]);
    atomicAdd(&ind_arg9[5+map1idx*15],arg16_l[5]);
    atomicAdd(&ind_arg9[6+map1idx*15],arg16_l[6]);
    atomicAdd(&ind_arg9[7+map1idx*15],arg16_l[7]);
    atomicAdd(&ind_arg9[8+map1idx*15],arg16_l[8]);
    atomicAdd(&ind_arg9[9+map1idx*15],arg16_l[9]);
    atomicAdd(&ind_arg9[10+map1idx*15],arg16_l[10]);
    atomicAdd(&ind_arg9[11+map1idx*15],arg16_l[11]);
    atomicAdd(&ind_arg9[12+map1idx*15],arg16_l[12]);
    atomicAdd(&ind_arg9[13+map1idx*15],arg16_l[13]);
    atomicAdd(&ind_arg9[14+map1idx*15],arg16_l[14]);
    atomicAdd(&ind_arg6[0+map3idx*15],arg17_l[0]);
    atomicAdd(&ind_arg6[1+map3idx*15],arg17_l[1]);
    atomicAdd(&ind_arg6[2+map3idx*15],arg17_l[2]);
    atomicAdd(&ind_arg6[3+map3idx*15],arg17_l[3]);
    atomicAdd(&ind_arg6[4+map3idx*15],arg17_l[4]);
    atomicAdd(&ind_arg6[5+map3idx*15],arg17_l[5]);
    atomicAdd(&ind_arg6[6+map3idx*15],arg17_l[6]);
    atomicAdd(&ind_arg6[7+map3idx*15],arg17_l[7]);
    atomicAdd(&ind_arg6[8+map3idx*15],arg17_l[8]);
    atomicAdd(&ind_arg6[9+map3idx*15],arg17_l[9]);
    atomicAdd(&ind_arg6[10+map3idx*15],arg17_l[10]);
    atomicAdd(&ind_arg6[11+map3idx*15],arg17_l[11]);
    atomicAdd(&ind_arg6[12+map3idx*15],arg17_l[12]);
    atomicAdd(&ind_arg6[13+map3idx*15],arg17_l[13]);
    atomicAdd(&ind_arg6[14+map3idx*15],arg17_l[14]);
    atomicAdd(&ind_arg7[0+map3idx*15],arg18_l[0]);
    atomicAdd(&ind_arg7[1+map3idx*15],arg18_l[1]);
    atomicAdd(&ind_arg7[2+map3idx*15],arg18_l[2]);
    atomicAdd(&ind_arg7[3+map3idx*15],arg18_l[3]);
    atomicAdd(&ind_arg7[4+map3idx*15],arg18_l[4]);
    atomicAdd(&ind_arg7[5+map3idx*15],arg18_l[5]);
    atomicAdd(&ind_arg7[6+map3idx*15],arg18_l[6]);
    atomicAdd(&ind_arg7[7+map3idx*15],arg18_l[7]);
    atomicAdd(&ind_arg7[8+map3idx*15],arg18_l[8]);
    atomicAdd(&ind_arg7[9+map3idx*15],arg18_l[9]);
    atomicAdd(&ind_arg7[10+map3idx*15],arg18_l[10]);
    atomicAdd(&ind_arg7[11+map3idx*15],arg18_l[11]);
    atomicAdd(&ind_arg7[12+map3idx*15],arg18_l[12]);
    atomicAdd(&ind_arg7[13+map3idx*15],arg18_l[13]);
    atomicAdd(&ind_arg7[14+map3idx*15],arg18_l[14]);
    atomicAdd(&ind_arg8[0+map3idx*15],arg19_l[0]);
    atomicAdd(&ind_arg8[1+map3idx*15],arg19_l[1]);
    atomicAdd(&ind_arg8[2+map3idx*15],arg19_l[2]);
    atomicAdd(&ind_arg8[3+map3idx*15],arg19_l[3]);
    atomicAdd(&ind_arg8[4+map3idx*15],arg19_l[4]);
    atomicAdd(&ind_arg8[5+map3idx*15],arg19_l[5]);
    atomicAdd(&ind_arg8[6+map3idx*15],arg19_l[6]);
    atomicAdd(&ind_arg8[7+map3idx*15],arg19_l[7]);
    atomicAdd(&ind_arg8[8+map3idx*15],arg19_l[8]);
    atomicAdd(&ind_arg8[9+map3idx*15],arg19_l[9]);
    atomicAdd(&ind_arg8[10+map3idx*15],arg19_l[10]);
    atomicAdd(&ind_arg8[11+map3idx*15],arg19_l[11]);
    atomicAdd(&ind_arg8[12+map3idx*15],arg19_l[12]);
    atomicAdd(&ind_arg8[13+map3idx*15],arg19_l[13]);
    atomicAdd(&ind_arg8[14+map3idx*15],arg19_l[14]);
    atomicAdd(&ind_arg9[0+map3idx*15],arg20_l[0]);
    atomicAdd(&ind_arg9[1+map3idx*15],arg20_l[1]);
    atomicAdd(&ind_arg9[2+map3idx*15],arg20_l[2]);
    atomicAdd(&ind_arg9[3+map3idx*15],arg20_l[3]);
    atomicAdd(&ind_arg9[4+map3idx*15],arg20_l[4]);
    atomicAdd(&ind_arg9[5+map3idx*15],arg20_l[5]);
    atomicAdd(&ind_arg9[6+map3idx*15],arg20_l[6]);
    atomicAdd(&ind_arg9[7+map3idx*15],arg20_l[7]);
    atomicAdd(&ind_arg9[8+map3idx*15],arg20_l[8]);
    atomicAdd(&ind_arg9[9+map3idx*15],arg20_l[9]);
    atomicAdd(&ind_arg9[10+map3idx*15],arg20_l[10]);
    atomicAdd(&ind_arg9[11+map3idx*15],arg20_l[11]);
    atomicAdd(&ind_arg9[12+map3idx*15],arg20_l[12]);
    atomicAdd(&ind_arg9[13+map3idx*15],arg20_l[13]);
    atomicAdd(&ind_arg9[14+map3idx*15],arg20_l[14]);
  }
}


//host stub function
void op_par_loop_get_neighbour_q(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15,
  op_arg arg16,
  op_arg arg17,
  op_arg arg18,
  op_arg arg19,
  op_arg arg20){

  int nargs = 21;
  op_arg args[21];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;
  args[13] = arg13;
  args[14] = arg14;
  args[15] = arg15;
  args[16] = arg16;
  args[17] = arg17;
  args[18] = arg18;
  args[19] = arg19;
  args[20] = arg20;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;


  int    ninds   = 10;
  int    inds[21] = {-1,0,1,0,1,2,3,4,5,2,3,4,5,6,7,8,9,6,7,8,9};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: get_neighbour_q\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_3
      int nthread = OP_BLOCK_SIZE_3;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_get_neighbour_q<<<nblocks,nthread>>>(
        (double *)arg1.data_d,
        (double *)arg2.data_d,
        (double *)arg5.data_d,
        (double *)arg6.data_d,
        (double *)arg7.data_d,
        (double *)arg8.data_d,
        (double *)arg13.data_d,
        (double *)arg14.data_d,
        (double *)arg15.data_d,
        (double *)arg16.data_d,
        arg1.map_data_d,
        (int*)arg0.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].time     += wall_t2 - wall_t1;
}
