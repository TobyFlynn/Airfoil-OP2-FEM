//
// auto-generated by op2.py
//

//user function
__device__ void get_neighbour_q_gpu( const int *edgeNum, const double *xL,
                            const double *yL, const double *xR, const double *yR,
                            const double *qL, const double *qR,
                            double *exteriorQL, double *exteriorQR) {

  int edgeL = edgeNum[0];
  int edgeR = edgeNum[1];
  bool reverse;

  if(edgeR == 0) {
    if(edgeL == 0) {
      reverse = !(xL[0] == xR[0] && yL[0] == yR[0]);
    } else if(edgeL == 1) {
      reverse = !(xL[1] == xR[0] && yL[1] == yR[0]);
    } else {
      reverse = !(xL[2] == xR[0] && yL[2] == yR[0]);
    }
  } else if(edgeR == 1) {
    if(edgeL == 0) {
      reverse = !(xL[0] == xR[1] && yL[0] == yR[1]);
    } else if(edgeL == 1) {
      reverse = !(xL[1] == xR[1] && yL[1] == yR[1]);
    } else {
      reverse = !(xL[2] == xR[1] && yL[2] == yR[1]);
    }
  } else {
    if(edgeL == 0) {
      reverse = !(xL[0] == xR[2] && yL[0] == yR[2]);
    } else if(edgeL == 1) {
      reverse = !(xL[1] == xR[2] && yL[1] == yR[2]);
    } else {
      reverse = !(xL[2] == xR[2] && yL[2] == yR[2]);
    }
  }

  int exInd = 0;
  if(edgeL == 1) exInd = 4 * 5;
  else if(edgeL == 2) exInd = 2 * 4 * 5;

  int *fmask;

  if(edgeR == 0) {
    fmask = FMASK_cuda;
  } else if(edgeR == 1) {
    fmask = &FMASK_cuda[5];
  } else {
    fmask = &FMASK_cuda[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int rInd;
    if(reverse) {
      rInd = 4 * fmask[5 - i - 1];
    } else {
      rInd = 4 * fmask[i];
    }
    exteriorQL[exInd + 4 * i]     += qR[rInd];
    exteriorQL[exInd + 4 * i + 1] += qR[rInd + 1];
    exteriorQL[exInd + 4 * i + 2] += qR[rInd + 2];
    exteriorQL[exInd + 4 * i + 3] += qR[rInd + 3];
  }

  exInd = 0;
  if(edgeR == 1) exInd = 4 * 5;
  else if(edgeR == 2) exInd = 2 * 4 * 5;

  if(edgeL == 0) {
    fmask = FMASK_cuda;
  } else if(edgeL == 1) {
    fmask = &FMASK_cuda[5];
  } else {
    fmask = &FMASK_cuda[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int lInd;
    if(reverse) {
      lInd = 4 * fmask[5 - i - 1];
    } else {
      lInd = 4 * fmask[i];
    }
    exteriorQR[exInd + 4 * i]     += qL[lInd];
    exteriorQR[exInd + 4 * i + 1] += qL[lInd + 1];
    exteriorQR[exInd + 4 * i + 2] += qL[lInd + 2];
    exteriorQR[exInd + 4 * i + 3] += qL[lInd + 3];
  }

}

// CUDA kernel function
__global__ void op_cuda_get_neighbour_q(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  double *__restrict ind_arg3,
  const int *__restrict opDat1Map,
  const int *__restrict arg0,
  int start,
  int end,
  int   set_size) {
  double arg7_l[60];
  double arg8_l[60];
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg7_l[60];
    for ( int d=0; d<60; d++ ){
      arg7_l[d] = ZERO_double;
    }
    double arg8_l[60];
    for ( int d=0; d<60; d++ ){
      arg8_l[d] = ZERO_double;
    }
    int map1idx;
    int map3idx;
    map1idx = opDat1Map[n + set_size * 0];
    map3idx = opDat1Map[n + set_size * 1];

    //user-supplied kernel call
    get_neighbour_q_gpu(arg0+n*2,
                    ind_arg0+map1idx*3,
                    ind_arg1+map1idx*3,
                    ind_arg0+map3idx*3,
                    ind_arg1+map3idx*3,
                    ind_arg2+map1idx*60,
                    ind_arg2+map3idx*60,
                    arg7_l,
                    arg8_l);
    atomicAdd(&ind_arg3[0+map1idx*60],arg7_l[0]);
    atomicAdd(&ind_arg3[1+map1idx*60],arg7_l[1]);
    atomicAdd(&ind_arg3[2+map1idx*60],arg7_l[2]);
    atomicAdd(&ind_arg3[3+map1idx*60],arg7_l[3]);
    atomicAdd(&ind_arg3[4+map1idx*60],arg7_l[4]);
    atomicAdd(&ind_arg3[5+map1idx*60],arg7_l[5]);
    atomicAdd(&ind_arg3[6+map1idx*60],arg7_l[6]);
    atomicAdd(&ind_arg3[7+map1idx*60],arg7_l[7]);
    atomicAdd(&ind_arg3[8+map1idx*60],arg7_l[8]);
    atomicAdd(&ind_arg3[9+map1idx*60],arg7_l[9]);
    atomicAdd(&ind_arg3[10+map1idx*60],arg7_l[10]);
    atomicAdd(&ind_arg3[11+map1idx*60],arg7_l[11]);
    atomicAdd(&ind_arg3[12+map1idx*60],arg7_l[12]);
    atomicAdd(&ind_arg3[13+map1idx*60],arg7_l[13]);
    atomicAdd(&ind_arg3[14+map1idx*60],arg7_l[14]);
    atomicAdd(&ind_arg3[15+map1idx*60],arg7_l[15]);
    atomicAdd(&ind_arg3[16+map1idx*60],arg7_l[16]);
    atomicAdd(&ind_arg3[17+map1idx*60],arg7_l[17]);
    atomicAdd(&ind_arg3[18+map1idx*60],arg7_l[18]);
    atomicAdd(&ind_arg3[19+map1idx*60],arg7_l[19]);
    atomicAdd(&ind_arg3[20+map1idx*60],arg7_l[20]);
    atomicAdd(&ind_arg3[21+map1idx*60],arg7_l[21]);
    atomicAdd(&ind_arg3[22+map1idx*60],arg7_l[22]);
    atomicAdd(&ind_arg3[23+map1idx*60],arg7_l[23]);
    atomicAdd(&ind_arg3[24+map1idx*60],arg7_l[24]);
    atomicAdd(&ind_arg3[25+map1idx*60],arg7_l[25]);
    atomicAdd(&ind_arg3[26+map1idx*60],arg7_l[26]);
    atomicAdd(&ind_arg3[27+map1idx*60],arg7_l[27]);
    atomicAdd(&ind_arg3[28+map1idx*60],arg7_l[28]);
    atomicAdd(&ind_arg3[29+map1idx*60],arg7_l[29]);
    atomicAdd(&ind_arg3[30+map1idx*60],arg7_l[30]);
    atomicAdd(&ind_arg3[31+map1idx*60],arg7_l[31]);
    atomicAdd(&ind_arg3[32+map1idx*60],arg7_l[32]);
    atomicAdd(&ind_arg3[33+map1idx*60],arg7_l[33]);
    atomicAdd(&ind_arg3[34+map1idx*60],arg7_l[34]);
    atomicAdd(&ind_arg3[35+map1idx*60],arg7_l[35]);
    atomicAdd(&ind_arg3[36+map1idx*60],arg7_l[36]);
    atomicAdd(&ind_arg3[37+map1idx*60],arg7_l[37]);
    atomicAdd(&ind_arg3[38+map1idx*60],arg7_l[38]);
    atomicAdd(&ind_arg3[39+map1idx*60],arg7_l[39]);
    atomicAdd(&ind_arg3[40+map1idx*60],arg7_l[40]);
    atomicAdd(&ind_arg3[41+map1idx*60],arg7_l[41]);
    atomicAdd(&ind_arg3[42+map1idx*60],arg7_l[42]);
    atomicAdd(&ind_arg3[43+map1idx*60],arg7_l[43]);
    atomicAdd(&ind_arg3[44+map1idx*60],arg7_l[44]);
    atomicAdd(&ind_arg3[45+map1idx*60],arg7_l[45]);
    atomicAdd(&ind_arg3[46+map1idx*60],arg7_l[46]);
    atomicAdd(&ind_arg3[47+map1idx*60],arg7_l[47]);
    atomicAdd(&ind_arg3[48+map1idx*60],arg7_l[48]);
    atomicAdd(&ind_arg3[49+map1idx*60],arg7_l[49]);
    atomicAdd(&ind_arg3[50+map1idx*60],arg7_l[50]);
    atomicAdd(&ind_arg3[51+map1idx*60],arg7_l[51]);
    atomicAdd(&ind_arg3[52+map1idx*60],arg7_l[52]);
    atomicAdd(&ind_arg3[53+map1idx*60],arg7_l[53]);
    atomicAdd(&ind_arg3[54+map1idx*60],arg7_l[54]);
    atomicAdd(&ind_arg3[55+map1idx*60],arg7_l[55]);
    atomicAdd(&ind_arg3[56+map1idx*60],arg7_l[56]);
    atomicAdd(&ind_arg3[57+map1idx*60],arg7_l[57]);
    atomicAdd(&ind_arg3[58+map1idx*60],arg7_l[58]);
    atomicAdd(&ind_arg3[59+map1idx*60],arg7_l[59]);
    atomicAdd(&ind_arg3[0+map3idx*60],arg8_l[0]);
    atomicAdd(&ind_arg3[1+map3idx*60],arg8_l[1]);
    atomicAdd(&ind_arg3[2+map3idx*60],arg8_l[2]);
    atomicAdd(&ind_arg3[3+map3idx*60],arg8_l[3]);
    atomicAdd(&ind_arg3[4+map3idx*60],arg8_l[4]);
    atomicAdd(&ind_arg3[5+map3idx*60],arg8_l[5]);
    atomicAdd(&ind_arg3[6+map3idx*60],arg8_l[6]);
    atomicAdd(&ind_arg3[7+map3idx*60],arg8_l[7]);
    atomicAdd(&ind_arg3[8+map3idx*60],arg8_l[8]);
    atomicAdd(&ind_arg3[9+map3idx*60],arg8_l[9]);
    atomicAdd(&ind_arg3[10+map3idx*60],arg8_l[10]);
    atomicAdd(&ind_arg3[11+map3idx*60],arg8_l[11]);
    atomicAdd(&ind_arg3[12+map3idx*60],arg8_l[12]);
    atomicAdd(&ind_arg3[13+map3idx*60],arg8_l[13]);
    atomicAdd(&ind_arg3[14+map3idx*60],arg8_l[14]);
    atomicAdd(&ind_arg3[15+map3idx*60],arg8_l[15]);
    atomicAdd(&ind_arg3[16+map3idx*60],arg8_l[16]);
    atomicAdd(&ind_arg3[17+map3idx*60],arg8_l[17]);
    atomicAdd(&ind_arg3[18+map3idx*60],arg8_l[18]);
    atomicAdd(&ind_arg3[19+map3idx*60],arg8_l[19]);
    atomicAdd(&ind_arg3[20+map3idx*60],arg8_l[20]);
    atomicAdd(&ind_arg3[21+map3idx*60],arg8_l[21]);
    atomicAdd(&ind_arg3[22+map3idx*60],arg8_l[22]);
    atomicAdd(&ind_arg3[23+map3idx*60],arg8_l[23]);
    atomicAdd(&ind_arg3[24+map3idx*60],arg8_l[24]);
    atomicAdd(&ind_arg3[25+map3idx*60],arg8_l[25]);
    atomicAdd(&ind_arg3[26+map3idx*60],arg8_l[26]);
    atomicAdd(&ind_arg3[27+map3idx*60],arg8_l[27]);
    atomicAdd(&ind_arg3[28+map3idx*60],arg8_l[28]);
    atomicAdd(&ind_arg3[29+map3idx*60],arg8_l[29]);
    atomicAdd(&ind_arg3[30+map3idx*60],arg8_l[30]);
    atomicAdd(&ind_arg3[31+map3idx*60],arg8_l[31]);
    atomicAdd(&ind_arg3[32+map3idx*60],arg8_l[32]);
    atomicAdd(&ind_arg3[33+map3idx*60],arg8_l[33]);
    atomicAdd(&ind_arg3[34+map3idx*60],arg8_l[34]);
    atomicAdd(&ind_arg3[35+map3idx*60],arg8_l[35]);
    atomicAdd(&ind_arg3[36+map3idx*60],arg8_l[36]);
    atomicAdd(&ind_arg3[37+map3idx*60],arg8_l[37]);
    atomicAdd(&ind_arg3[38+map3idx*60],arg8_l[38]);
    atomicAdd(&ind_arg3[39+map3idx*60],arg8_l[39]);
    atomicAdd(&ind_arg3[40+map3idx*60],arg8_l[40]);
    atomicAdd(&ind_arg3[41+map3idx*60],arg8_l[41]);
    atomicAdd(&ind_arg3[42+map3idx*60],arg8_l[42]);
    atomicAdd(&ind_arg3[43+map3idx*60],arg8_l[43]);
    atomicAdd(&ind_arg3[44+map3idx*60],arg8_l[44]);
    atomicAdd(&ind_arg3[45+map3idx*60],arg8_l[45]);
    atomicAdd(&ind_arg3[46+map3idx*60],arg8_l[46]);
    atomicAdd(&ind_arg3[47+map3idx*60],arg8_l[47]);
    atomicAdd(&ind_arg3[48+map3idx*60],arg8_l[48]);
    atomicAdd(&ind_arg3[49+map3idx*60],arg8_l[49]);
    atomicAdd(&ind_arg3[50+map3idx*60],arg8_l[50]);
    atomicAdd(&ind_arg3[51+map3idx*60],arg8_l[51]);
    atomicAdd(&ind_arg3[52+map3idx*60],arg8_l[52]);
    atomicAdd(&ind_arg3[53+map3idx*60],arg8_l[53]);
    atomicAdd(&ind_arg3[54+map3idx*60],arg8_l[54]);
    atomicAdd(&ind_arg3[55+map3idx*60],arg8_l[55]);
    atomicAdd(&ind_arg3[56+map3idx*60],arg8_l[56]);
    atomicAdd(&ind_arg3[57+map3idx*60],arg8_l[57]);
    atomicAdd(&ind_arg3[58+map3idx*60],arg8_l[58]);
    atomicAdd(&ind_arg3[59+map3idx*60],arg8_l[59]);
  }
}


//host stub function
void op_par_loop_get_neighbour_q(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8){

  int nargs = 9;
  op_arg args[9];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(4);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[4].name      = name;
  OP_kernels[4].count    += 1;


  int    ninds   = 4;
  int    inds[9] = {-1,0,1,0,1,2,2,3,3};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: get_neighbour_q\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_4
      int nthread = OP_BLOCK_SIZE_4;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_get_neighbour_q<<<nblocks,nthread>>>(
        (double *)arg1.data_d,
        (double *)arg2.data_d,
        (double *)arg5.data_d,
        (double *)arg7.data_d,
        arg1.map_data_d,
        (int*)arg0.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[4].time     += wall_t2 - wall_t1;
}
