//
// auto-generated by op2.py
//

#include "../fluxes.h"

//user function
__device__ void internal_fluxes_gpu( const double *q0, const double *q1,
                            const double *q2, const double *q3, double *f0,
                            double *f1, double *f2, double *f3, double *g0,
                            double *g1, double *g2, double *g3) {
  for(int i = 0; i < 15; i++) {
    double rho, u, v, p;
    euler_flux(q0[i], q1[i], q2[i], q3[i], &f0[i], &f1[i], &f2[i], &f3[i],
               &g0[i], &g1[i], &g2[i], &g3[i], &rho, &u, &v, &p);
  }

}

// CUDA kernel function
__global__ void op_cuda_internal_fluxes(
  const double *__restrict arg0,
  const double *__restrict arg1,
  const double *__restrict arg2,
  const double *__restrict arg3,
  double *arg4,
  double *arg5,
  double *arg6,
  double *arg7,
  double *arg8,
  double *arg9,
  double *arg10,
  double *arg11,
  int   set_size ) {


  //process set elements
  for ( int n=threadIdx.x+blockIdx.x*blockDim.x; n<set_size; n+=blockDim.x*gridDim.x ){

    //user-supplied kernel call
    internal_fluxes_gpu(arg0+n*15,
                    arg1+n*15,
                    arg2+n*15,
                    arg3+n*15,
                    arg4+n*15,
                    arg5+n*15,
                    arg6+n*15,
                    arg7+n*15,
                    arg8+n*15,
                    arg9+n*15,
                    arg10+n*15,
                    arg11+n*15);
  }
}


//host stub function
void op_par_loop_internal_fluxes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11){

  int nargs = 12;
  op_arg args[12];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(7);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[7].name      = name;
  OP_kernels[7].count    += 1;


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  internal_fluxes");
  }

  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_7
      int nthread = OP_BLOCK_SIZE_7;
    #else
      int nthread = OP_block_size;
    #endif

    int nblocks = 200;

    op_cuda_internal_fluxes<<<nblocks,nthread>>>(
      (double *) arg0.data_d,
      (double *) arg1.data_d,
      (double *) arg2.data_d,
      (double *) arg3.data_d,
      (double *) arg4.data_d,
      (double *) arg5.data_d,
      (double *) arg6.data_d,
      (double *) arg7.data_d,
      (double *) arg8.data_d,
      (double *) arg9.data_d,
      (double *) arg10.data_d,
      (double *) arg11.data_d,
      set->size );
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[7].time     += wall_t2 - wall_t1;
  OP_kernels[7].transfer += (float)set->size * arg0.size;
  OP_kernels[7].transfer += (float)set->size * arg1.size;
  OP_kernels[7].transfer += (float)set->size * arg2.size;
  OP_kernels[7].transfer += (float)set->size * arg3.size;
  OP_kernels[7].transfer += (float)set->size * arg4.size * 2.0f;
  OP_kernels[7].transfer += (float)set->size * arg5.size * 2.0f;
  OP_kernels[7].transfer += (float)set->size * arg6.size * 2.0f;
  OP_kernels[7].transfer += (float)set->size * arg7.size * 2.0f;
  OP_kernels[7].transfer += (float)set->size * arg8.size * 2.0f;
  OP_kernels[7].transfer += (float)set->size * arg9.size * 2.0f;
  OP_kernels[7].transfer += (float)set->size * arg10.size * 2.0f;
  OP_kernels[7].transfer += (float)set->size * arg11.size * 2.0f;
}
