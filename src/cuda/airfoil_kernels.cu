//
// auto-generated by op2.py
//

//global constants
#ifndef MAX_CONST_SIZE
#define MAX_CONST_SIZE 128
#endif

__constant__ double gam_cuda;
__constant__ double bc_mach_cuda;
__constant__ double bc_alpha_cuda;
__constant__ double bc_p_cuda;
__constant__ double bc_r_cuda;
__constant__ double bc_u_cuda;
__constant__ double bc_v_cuda;
__constant__ double bc_e_cuda;
__constant__ double ones_cuda[15];
__constant__ double r_cuda[15];
__constant__ double s_cuda[15];
__constant__ double Dr_cuda[225];
__constant__ double Ds_cuda[225];
__constant__ double Drw_cuda[225];
__constant__ double Dsw_cuda[225];
__constant__ int FMASK_cuda[15];
__constant__ double LIFT_cuda[225];

//header
#include "op_lib_cpp.h"
#include "op_cuda_rt_support.h"
#include "op_cuda_reduction.h"

void op_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  if (!OP_hybrid_gpu) return;
  if (!strcmp(name,"gam")) {
    cutilSafeCall(cudaMemcpyToSymbol(gam_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"bc_mach")) {
    cutilSafeCall(cudaMemcpyToSymbol(bc_mach_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"bc_alpha")) {
    cutilSafeCall(cudaMemcpyToSymbol(bc_alpha_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"bc_p")) {
    cutilSafeCall(cudaMemcpyToSymbol(bc_p_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"bc_r")) {
    cutilSafeCall(cudaMemcpyToSymbol(bc_r_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"bc_u")) {
    cutilSafeCall(cudaMemcpyToSymbol(bc_u_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"bc_v")) {
    cutilSafeCall(cudaMemcpyToSymbol(bc_v_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"bc_e")) {
    cutilSafeCall(cudaMemcpyToSymbol(bc_e_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"ones")) {
    cutilSafeCall(cudaMemcpyToSymbol(ones_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"r")) {
    cutilSafeCall(cudaMemcpyToSymbol(r_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"s")) {
    cutilSafeCall(cudaMemcpyToSymbol(s_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"Dr")) {
    cutilSafeCall(cudaMemcpyToSymbol(Dr_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"Ds")) {
    cutilSafeCall(cudaMemcpyToSymbol(Ds_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"Drw")) {
    cutilSafeCall(cudaMemcpyToSymbol(Drw_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"Dsw")) {
    cutilSafeCall(cudaMemcpyToSymbol(Dsw_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"FMASK")) {
    cutilSafeCall(cudaMemcpyToSymbol(FMASK_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"LIFT")) {
    cutilSafeCall(cudaMemcpyToSymbol(LIFT_cuda, dat, dim*size));
  }
  else
  {
    printf("error: unknown const name\n"); exit(1);
  }
}

//user kernel files
#include "init_grid_kernel.cu"
#include "set_ic_kernel.cu"
#include "flux_zero_kernel.cu"
#include "calc_dt_kernel.cu"
#include "get_neighbour_q_kernel.cu"
#include "get_bedge_q_kernel.cu"
#include "euler_rhs_kernel.cu"
#include "set_workingQ_kernel.cu"
#include "update_Q_kernel.cu"
