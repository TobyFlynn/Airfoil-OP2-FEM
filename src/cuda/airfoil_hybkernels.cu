//
// auto-generated by op2.py
//

//header
#ifdef GPUPASS
#define op_par_loop_init_grid op_par_loop_init_grid_gpu
#define op_par_loop_set_ic op_par_loop_set_ic_gpu
#define op_par_loop_neighbour_zero op_par_loop_neighbour_zero_gpu
#define op_par_loop_calc_dt op_par_loop_calc_dt_gpu
#define op_par_loop_get_neighbour_q op_par_loop_get_neighbour_q_gpu
#define op_par_loop_get_bedge_q op_par_loop_get_bedge_q_gpu
#define op_par_loop_internal_fluxes op_par_loop_internal_fluxes_gpu
#define op_par_loop_euler_rhs op_par_loop_euler_rhs_gpu
#define op_par_loop_set_workingQ op_par_loop_set_workingQ_gpu
#define op_par_loop_update_Q op_par_loop_update_Q_gpu
#include "airfoil_kernels.cu"
#undef op_par_loop_init_grid
#undef op_par_loop_set_ic
#undef op_par_loop_neighbour_zero
#undef op_par_loop_calc_dt
#undef op_par_loop_get_neighbour_q
#undef op_par_loop_get_bedge_q
#undef op_par_loop_internal_fluxes
#undef op_par_loop_euler_rhs
#undef op_par_loop_set_workingQ
#undef op_par_loop_update_Q
#else
#define op_par_loop_init_grid op_par_loop_init_grid_cpu
#define op_par_loop_set_ic op_par_loop_set_ic_cpu
#define op_par_loop_neighbour_zero op_par_loop_neighbour_zero_cpu
#define op_par_loop_calc_dt op_par_loop_calc_dt_cpu
#define op_par_loop_get_neighbour_q op_par_loop_get_neighbour_q_cpu
#define op_par_loop_get_bedge_q op_par_loop_get_bedge_q_cpu
#define op_par_loop_internal_fluxes op_par_loop_internal_fluxes_cpu
#define op_par_loop_euler_rhs op_par_loop_euler_rhs_cpu
#define op_par_loop_set_workingQ op_par_loop_set_workingQ_cpu
#define op_par_loop_update_Q op_par_loop_update_Q_cpu
#include "../openmp/airfoil_kernels.cpp"
#undef op_par_loop_init_grid
#undef op_par_loop_set_ic
#undef op_par_loop_neighbour_zero
#undef op_par_loop_calc_dt
#undef op_par_loop_get_neighbour_q
#undef op_par_loop_get_bedge_q
#undef op_par_loop_internal_fluxes
#undef op_par_loop_euler_rhs
#undef op_par_loop_set_workingQ
#undef op_par_loop_update_Q

//user kernel files

void op_par_loop_init_grid_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_init_grid(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15){

  if (OP_hybrid_gpu) {
    op_par_loop_init_grid_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15);

    }else{
    op_par_loop_init_grid_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15);

  }
}
#else
void op_par_loop_init_grid(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14,
  op_arg arg15){

  op_par_loop_init_grid_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8,
    arg9,
    arg10,
    arg11,
    arg12,
    arg13,
    arg14,
    arg15);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_set_ic_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_set_ic(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  if (OP_hybrid_gpu) {
    op_par_loop_set_ic_gpu(name, set,
      arg0,
      arg1);

    }else{
    op_par_loop_set_ic_cpu(name, set,
      arg0,
      arg1);

  }
}
#else
void op_par_loop_set_ic(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  op_par_loop_set_ic_gpu(name, set,
    arg0,
    arg1);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_neighbour_zero_gpu(char const *name, op_set set,
  op_arg arg0);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_neighbour_zero(char const *name, op_set set,
  op_arg arg0){

  if (OP_hybrid_gpu) {
    op_par_loop_neighbour_zero_gpu(name, set,
      arg0);

    }else{
    op_par_loop_neighbour_zero_cpu(name, set,
      arg0);

  }
}
#else
void op_par_loop_neighbour_zero(char const *name, op_set set,
  op_arg arg0){

  op_par_loop_neighbour_zero_gpu(name, set,
    arg0);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_calc_dt_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_calc_dt(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  if (OP_hybrid_gpu) {
    op_par_loop_calc_dt_gpu(name, set,
      arg0,
      arg1,
      arg2);

    }else{
    op_par_loop_calc_dt_cpu(name, set,
      arg0,
      arg1,
      arg2);

  }
}
#else
void op_par_loop_calc_dt(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  op_par_loop_calc_dt_gpu(name, set,
    arg0,
    arg1,
    arg2);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_get_neighbour_q_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_get_neighbour_q(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8){

  if (OP_hybrid_gpu) {
    op_par_loop_get_neighbour_q_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8);

    }else{
    op_par_loop_get_neighbour_q_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8);

  }
}
#else
void op_par_loop_get_neighbour_q(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8){

  op_par_loop_get_neighbour_q_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_get_bedge_q_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_get_bedge_q(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  if (OP_hybrid_gpu) {
    op_par_loop_get_bedge_q_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

    }else{
    op_par_loop_get_bedge_q_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

  }
}
#else
void op_par_loop_get_bedge_q(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  op_par_loop_get_bedge_q_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_internal_fluxes_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_internal_fluxes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  if (OP_hybrid_gpu) {
    op_par_loop_internal_fluxes_gpu(name, set,
      arg0,
      arg1,
      arg2);

    }else{
    op_par_loop_internal_fluxes_cpu(name, set,
      arg0,
      arg1,
      arg2);

  }
}
#else
void op_par_loop_internal_fluxes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  op_par_loop_internal_fluxes_gpu(name, set,
    arg0,
    arg1,
    arg2);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_euler_rhs_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_euler_rhs(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14){

  if (OP_hybrid_gpu) {
    op_par_loop_euler_rhs_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14);

    }else{
    op_par_loop_euler_rhs_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14);

  }
}
#else
void op_par_loop_euler_rhs(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12,
  op_arg arg13,
  op_arg arg14){

  op_par_loop_euler_rhs_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5,
    arg6,
    arg7,
    arg8,
    arg9,
    arg10,
    arg11,
    arg12,
    arg13,
    arg14);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_set_workingQ_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_set_workingQ(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  if (OP_hybrid_gpu) {
    op_par_loop_set_workingQ_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

    }else{
    op_par_loop_set_workingQ_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

  }
}
#else
void op_par_loop_set_workingQ(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  op_par_loop_set_workingQ_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_update_Q_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_update_Q(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  if (OP_hybrid_gpu) {
    op_par_loop_update_Q_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

    }else{
    op_par_loop_update_Q_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

  }
}
#else
void op_par_loop_update_Q(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  op_par_loop_update_Q_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5);

  }
#endif //OP_HYBRID_GPU
#endif
