//
// auto-generated by op2.py
//

//user function
__device__ void get_bedge_q_gpu( const int *bedge_type, const int *bedgeNum,
                        const double *nx, const double *ny,
                        const double *q, double *exteriorQ) {
  int exInd = 0;
  int nInd = 0;
  if(*bedgeNum == 1) {
    exInd = 4 * 5;
    nInd = 5;
  } else if(*bedgeNum == 2) {
    exInd = 2 * 4 * 5;
    nInd = 2 * 5;
  }

  int *fmask;

  if(*bedgeNum == 0) {
    fmask = FMASK_cuda;
  } else if(*bedgeNum == 1) {
    fmask = &FMASK_cuda[5];
  } else {
    fmask = &FMASK_cuda[2 * 5];
  }

  if(*bedge_type == 0) {

    for(int i = 0; i < 5; i++) {
      exteriorQ[exInd + i * 4]     += bc_r_cuda;
      exteriorQ[exInd + i * 4 + 1] += bc_r_cuda * bc_u_cuda;
      exteriorQ[exInd + i * 4 + 2] +=  bc_r_cuda * bc_v_cuda;
      exteriorQ[exInd + i * 4 + 3] += bc_e_cuda;
    }
  } else if(*bedge_type == 1) {

    for(int i = 0; i < 5; i++) {
      int qInd = fmask[i] * 4;
      exteriorQ[exInd + i * 4]     += bc_r_cuda;
      exteriorQ[exInd + i * 4 + 1] += bc_r_cuda * bc_u_cuda;
      exteriorQ[exInd + i * 4 + 2] +=  bc_r_cuda * bc_v_cuda;
      exteriorQ[exInd + i * 4 + 3] += q[qInd + 3];
    }
  } else {

    for(int i = 0; i < 5; i++) {
      int qInd = fmask[i] * 4;
      exteriorQ[exInd + i * 4]     += q[qInd];
      exteriorQ[exInd + i * 4 + 1] += q[qInd + 1] - 2 * (nx[nInd + i] * q[qInd + 1] + ny[nInd + i] * q[qInd + 2]) * nx[nInd + i];
      exteriorQ[exInd + i * 4 + 2] += q[qInd + 2] - 2 * (nx[nInd + i] * q[qInd + 1] + ny[nInd + i] * q[qInd + 2]) * ny[nInd + i];
      exteriorQ[exInd + i * 4 + 3] += q[qInd + 3];
    }
  }

}

// CUDA kernel function
__global__ void op_cuda_get_bedge_q(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  double *__restrict ind_arg3,
  const int *__restrict opDat2Map,
  const int *__restrict arg0,
  const int *__restrict arg1,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    int map2idx;
    map2idx = opDat2Map[n + set_size * 0];

    //user-supplied kernel call
    get_bedge_q_gpu(arg0+n*1,
                arg1+n*1,
                ind_arg0+map2idx*15,
                ind_arg1+map2idx*15,
                ind_arg2+map2idx*60,
                ind_arg3+map2idx*60);
  }
}


//host stub function
void op_par_loop_get_bedge_q(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  int nargs = 6;
  op_arg args[6];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(5);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[5].name      = name;
  OP_kernels[5].count    += 1;


  int    ninds   = 4;
  int    inds[6] = {-1,-1,0,1,2,3};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: get_bedge_q\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_5
      int nthread = OP_BLOCK_SIZE_5;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_get_bedge_q<<<nblocks,nthread>>>(
        (double *)arg2.data_d,
        (double *)arg3.data_d,
        (double *)arg4.data_d,
        (double *)arg5.data_d,
        arg2.map_data_d,
        (int*)arg0.data_d,
        (int*)arg1.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[5].time     += wall_t2 - wall_t1;
}
