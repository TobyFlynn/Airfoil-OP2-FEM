//
// auto-generated by op2.py
//

//user function
__device__ void get_bedge_q_gpu( const int *bedge_type, const int *bedgeNum,
                        const double *nx, const double *ny, const double *q0,
                        const double *q1, const double *q2, const double *q3,
                        double *exteriorQ0, double *exteriorQ1,
                        double *exteriorQ2, double *exteriorQ3) {
  int exInd = 0;
  if(*bedgeNum == 1) {
    exInd = 5;
  } else if(*bedgeNum == 2) {
    exInd = 2 * 5;
  }

  int *fmask;

  if(*bedgeNum == 0) {
    fmask = FMASK_cuda;
  } else if(*bedgeNum == 1) {
    fmask = &FMASK_cuda[5];
  } else {
    fmask = &FMASK_cuda[2 * 5];
  }

  if(*bedge_type == 0) {

    for(int i = 0; i < 5; i++) {
      exteriorQ0[exInd + i] += bc_r_cuda;
      exteriorQ1[exInd + i] += bc_r_cuda * bc_u_cuda;
      exteriorQ2[exInd + i] += bc_r_cuda * bc_v_cuda;
      exteriorQ3[exInd + i] += bc_e_cuda;
    }
  } else if(*bedge_type == 1) {

    for(int i = 0; i < 5; i++) {
      int qInd = fmask[i];
      exteriorQ0[exInd] += bc_r_cuda;
      exteriorQ1[exInd] += bc_r_cuda * bc_u_cuda;
      exteriorQ2[exInd] += bc_r_cuda * bc_v_cuda;
      exteriorQ3[exInd] += q3[qInd];
    }
  } else {

    for(int i = 0; i < 5; i++) {
      int qInd = fmask[i];
      exteriorQ0[exInd] += q0[qInd];
      exteriorQ1[exInd] += q1[qInd] - 2 * (nx[exInd + i] * q1[qInd] + ny[exInd + i] * q2[qInd]) * nx[exInd + i];
      exteriorQ2[exInd] += q2[qInd] - 2 * (nx[exInd + i] * q1[qInd] + ny[exInd + i] * q2[qInd]) * ny[exInd + i];
      exteriorQ3[exInd] += q3[qInd];
    }
  }

}

// CUDA kernel function
__global__ void op_cuda_get_bedge_q(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  const double *__restrict ind_arg3,
  const double *__restrict ind_arg4,
  const double *__restrict ind_arg5,
  double *__restrict ind_arg6,
  double *__restrict ind_arg7,
  double *__restrict ind_arg8,
  double *__restrict ind_arg9,
  const int *__restrict opDat2Map,
  const int *__restrict arg0,
  const int *__restrict arg1,
  int start,
  int end,
  int   set_size) {
  double arg8_l[15];
  double arg9_l[15];
  double arg10_l[15];
  double arg11_l[15];
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg8_l[15];
    for ( int d=0; d<15; d++ ){
      arg8_l[d] = ZERO_double;
    }
    double arg9_l[15];
    for ( int d=0; d<15; d++ ){
      arg9_l[d] = ZERO_double;
    }
    double arg10_l[15];
    for ( int d=0; d<15; d++ ){
      arg10_l[d] = ZERO_double;
    }
    double arg11_l[15];
    for ( int d=0; d<15; d++ ){
      arg11_l[d] = ZERO_double;
    }
    int map2idx;
    map2idx = opDat2Map[n + set_size * 0];

    //user-supplied kernel call
    get_bedge_q_gpu(arg0+n*1,
                arg1+n*1,
                ind_arg0+map2idx*15,
                ind_arg1+map2idx*15,
                ind_arg2+map2idx*15,
                ind_arg3+map2idx*15,
                ind_arg4+map2idx*15,
                ind_arg5+map2idx*15,
                arg8_l,
                arg9_l,
                arg10_l,
                arg11_l);
    atomicAdd(&ind_arg6[0+map2idx*15],arg8_l[0]);
    atomicAdd(&ind_arg6[1+map2idx*15],arg8_l[1]);
    atomicAdd(&ind_arg6[2+map2idx*15],arg8_l[2]);
    atomicAdd(&ind_arg6[3+map2idx*15],arg8_l[3]);
    atomicAdd(&ind_arg6[4+map2idx*15],arg8_l[4]);
    atomicAdd(&ind_arg6[5+map2idx*15],arg8_l[5]);
    atomicAdd(&ind_arg6[6+map2idx*15],arg8_l[6]);
    atomicAdd(&ind_arg6[7+map2idx*15],arg8_l[7]);
    atomicAdd(&ind_arg6[8+map2idx*15],arg8_l[8]);
    atomicAdd(&ind_arg6[9+map2idx*15],arg8_l[9]);
    atomicAdd(&ind_arg6[10+map2idx*15],arg8_l[10]);
    atomicAdd(&ind_arg6[11+map2idx*15],arg8_l[11]);
    atomicAdd(&ind_arg6[12+map2idx*15],arg8_l[12]);
    atomicAdd(&ind_arg6[13+map2idx*15],arg8_l[13]);
    atomicAdd(&ind_arg6[14+map2idx*15],arg8_l[14]);
    atomicAdd(&ind_arg7[0+map2idx*15],arg9_l[0]);
    atomicAdd(&ind_arg7[1+map2idx*15],arg9_l[1]);
    atomicAdd(&ind_arg7[2+map2idx*15],arg9_l[2]);
    atomicAdd(&ind_arg7[3+map2idx*15],arg9_l[3]);
    atomicAdd(&ind_arg7[4+map2idx*15],arg9_l[4]);
    atomicAdd(&ind_arg7[5+map2idx*15],arg9_l[5]);
    atomicAdd(&ind_arg7[6+map2idx*15],arg9_l[6]);
    atomicAdd(&ind_arg7[7+map2idx*15],arg9_l[7]);
    atomicAdd(&ind_arg7[8+map2idx*15],arg9_l[8]);
    atomicAdd(&ind_arg7[9+map2idx*15],arg9_l[9]);
    atomicAdd(&ind_arg7[10+map2idx*15],arg9_l[10]);
    atomicAdd(&ind_arg7[11+map2idx*15],arg9_l[11]);
    atomicAdd(&ind_arg7[12+map2idx*15],arg9_l[12]);
    atomicAdd(&ind_arg7[13+map2idx*15],arg9_l[13]);
    atomicAdd(&ind_arg7[14+map2idx*15],arg9_l[14]);
    atomicAdd(&ind_arg8[0+map2idx*15],arg10_l[0]);
    atomicAdd(&ind_arg8[1+map2idx*15],arg10_l[1]);
    atomicAdd(&ind_arg8[2+map2idx*15],arg10_l[2]);
    atomicAdd(&ind_arg8[3+map2idx*15],arg10_l[3]);
    atomicAdd(&ind_arg8[4+map2idx*15],arg10_l[4]);
    atomicAdd(&ind_arg8[5+map2idx*15],arg10_l[5]);
    atomicAdd(&ind_arg8[6+map2idx*15],arg10_l[6]);
    atomicAdd(&ind_arg8[7+map2idx*15],arg10_l[7]);
    atomicAdd(&ind_arg8[8+map2idx*15],arg10_l[8]);
    atomicAdd(&ind_arg8[9+map2idx*15],arg10_l[9]);
    atomicAdd(&ind_arg8[10+map2idx*15],arg10_l[10]);
    atomicAdd(&ind_arg8[11+map2idx*15],arg10_l[11]);
    atomicAdd(&ind_arg8[12+map2idx*15],arg10_l[12]);
    atomicAdd(&ind_arg8[13+map2idx*15],arg10_l[13]);
    atomicAdd(&ind_arg8[14+map2idx*15],arg10_l[14]);
    atomicAdd(&ind_arg9[0+map2idx*15],arg11_l[0]);
    atomicAdd(&ind_arg9[1+map2idx*15],arg11_l[1]);
    atomicAdd(&ind_arg9[2+map2idx*15],arg11_l[2]);
    atomicAdd(&ind_arg9[3+map2idx*15],arg11_l[3]);
    atomicAdd(&ind_arg9[4+map2idx*15],arg11_l[4]);
    atomicAdd(&ind_arg9[5+map2idx*15],arg11_l[5]);
    atomicAdd(&ind_arg9[6+map2idx*15],arg11_l[6]);
    atomicAdd(&ind_arg9[7+map2idx*15],arg11_l[7]);
    atomicAdd(&ind_arg9[8+map2idx*15],arg11_l[8]);
    atomicAdd(&ind_arg9[9+map2idx*15],arg11_l[9]);
    atomicAdd(&ind_arg9[10+map2idx*15],arg11_l[10]);
    atomicAdd(&ind_arg9[11+map2idx*15],arg11_l[11]);
    atomicAdd(&ind_arg9[12+map2idx*15],arg11_l[12]);
    atomicAdd(&ind_arg9[13+map2idx*15],arg11_l[13]);
    atomicAdd(&ind_arg9[14+map2idx*15],arg11_l[14]);
  }
}


//host stub function
void op_par_loop_get_bedge_q(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11){

  int nargs = 12;
  op_arg args[12];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(4);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[4].name      = name;
  OP_kernels[4].count    += 1;


  int    ninds   = 10;
  int    inds[12] = {-1,-1,0,1,2,3,4,5,6,7,8,9};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: get_bedge_q\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_4
      int nthread = OP_BLOCK_SIZE_4;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_get_bedge_q<<<nblocks,nthread>>>(
        (double *)arg2.data_d,
        (double *)arg3.data_d,
        (double *)arg4.data_d,
        (double *)arg5.data_d,
        (double *)arg6.data_d,
        (double *)arg7.data_d,
        (double *)arg8.data_d,
        (double *)arg9.data_d,
        (double *)arg10.data_d,
        (double *)arg11.data_d,
        arg2.map_data_d,
        (int*)arg0.data_d,
        (int*)arg1.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[4].time     += wall_t2 - wall_t1;
}
